//  (* Code.1: OW-CPA model *)
theory OWCPA_asymmetric_encryption_TAMF01
begin
builtins: asymmetric-encryption

rule Setup:
[Fr(~key)] --[OnlyOnce(), Setup(~key)]-> [!Sk($A, ~key), !Pk($A, pk(~key))]

rule Get_pk:
[!Pk(S, publickey)] -->[Out(publickey)]

rule attackerkey:
[!Sk($B, key)] --[Oracle($B)]-> [Out(key)]

rule Attacker_make_message:
[Fr(m_)] --[ ]-> [ Out(<$B , m_>), St_Oracle(m_)]

rule Sender_encrypt:
[ Fr(~m), !Pk($A, ~key)] --[Send($A, aenc(<$A, ~m>, ~key)), Secret(~m), Sender($A), Oracle($B), Role('Sender'), Sender_send_plain(~m)]-> [Out(aenc(<$A, ~m>,~key)), St_ReceiveKey(~m, ~key)]

rule Encrypt_Attacker:
[!Pk($A, ~key), In(<$B, m_>), St_Oracle(m_)]
 --[Send($B, aenc(<$B, m_>, ~key)), Secret(m_), Oracle($B), Sender($A), Role('Oracle'), Attacker_send_plain(m_)]->
 [Out(aenc(<$B, m_>, ~key)), St_ReceiveKey_Oracle_plain(m_, ~key)]

rule Ow_Secrecy:
let
c_ = aenc(m_ , key)
in
 [St_ReceiveKey_Oracle_plain(m_, key_), In(aenc(<$B, m_>,key_)), St_ReceiveKey(~m, key), In(aenc(<$A, ~m>, key))]
 --[ Notequalvalue(<~m, m_>), Secretmessage(~m)]-> [Out(m_)]

restriction OnlyOnce:
"All #i #j. OnlyOnce() @ i & OnlyOnce() @ j==> #i = #j"

//restriction choiceplain:
// "All x #i. Attacker_send_plain(x)@i
//   ==> (Ex y #j. Attacker_send_plain(y)@j & #j < #i) | (Ex y #j. Sender_send_plain(y)@j & #j < #i)"

lemma ow_value_notequal:
 "All #i #j x. Notequalvalue(x)@i & Notequalvalue(x)@j ==> #i=#j"

lemma secret_sender_message:
  all-traces
    "All n #i. Secret(n) @i & Role('Sender') @i ==> (not (Ex #j. K(n)@j)) | (Ex B #j. Oracle(B)@j & Sender(B)@i)"

lemma ow_m_secret:
 "All m #i. Secretmessage(m)@i ==> not (Ex #j. K(m)@j)"

end
