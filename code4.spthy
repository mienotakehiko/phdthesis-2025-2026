//  (* Code.4: EUF-CMA model *)
theory euf_cma_asymmetric_encryption_TAMF04
begin
builtins: signing, revealing-signing, asymmetric-encryption

rule Setup:
[Fr(~key)] --[OnlyOnce(), Setup(~key)]-> [!Sk($A, ~key), !Pk($A, pk(~key))]

rule Get_pk:
[!Pk(S, publickey)] -->[Out(publickey)]

rule attackerkey:
[!Sk($A, key)] --[Oracle($B)]-> [Out(key)]

rule Attacker_make_message:
[Fr(m_)] --[ ]-> [ Out(<$B , m_>), St_Oracle(m_)]

rule Sender_messages_signs:
[Fr(~m), !Sk($A, ~key)] --[Send($A, ~m), Signed($A, ~m), Secret(~m), Role('Sender')]-> [Out(<$A, ~m, sign(~m, ~key)>),  St_Sender($A, ~m)]

rule Sign_Attacker:
[!Pk($A, ~key), In(<$A, m_>), St_Oracle(m_)]  --[Send($B, revealSign(m_, ~key)), Secret(m_), Role('Oracle')]->  [Out(<revealSign(m_, ~key), m_>)]

rule Receiver_verify:
[In(<$A, ~m, sign(~m, ~key)>), !Pk($A, pk(~key)), St_Sender($A, ~m), !Sk($A, ~key)] --[Finish(), Secret(~m), Authentic($A, ~m) , Eq(verify(sign(~m, ~key),~m, pk(~key)), true), Verified($A, $B, ~m)]-> [ ]

restriction Equality:
"All x y #i. Eq(x, y)@#i ==> x=y"

lemma existential_unforgeability:
"All X Y m #i. Verified(X, Y, m)@i ==> ((Ex #j. Signed(X, m)@j & j<i) | (Ex #l. Oracle(X)@l & l<i) )"

 lemma messages_authentication:
"All X M #i. (Authentic(X, M)@i & not (Ex #l. Oracle(X)@l)) ==> (Ex #j. Send(X, M)@j & j<i)"

lemma sign_verify:
"All Y M #i. (Authentic(Y, M)@i & not (Ex #k. Oracle(Y)@k) & (Ex a b #l. Eq(a, b)@#l) ==> (Ex #j. Send(Y, M)@j & j<i))"

end
