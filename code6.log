theory IBE_CHK_formalization begin

// Function signature and definition of the equational theory E

functions: Get_Masterpkey/1, KGCpkey/2, KGCskey/2, Make_Masterskey/2,
           UserID/4, dec/2, enc/2, fst/1, pair/2, sign/2, snd/1, true/0, verify/3
equations:
    dec(enc(message, KGCpkey(Get_Masterpkey(Masterskey), User)),
        KGCskey(Masterskey, User))
  = message,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(message, KGCskey(Masterskey, User)), message,
           KGCpkey(Get_Masterpkey(Masterskey), User))
  = true







rule (modulo E) Setup:
   [ Fr( ~Masterskey ) ]
  --[ OnlyOnce( ) ]->
   [
   !Make_Masterskey( ~Masterskey, 'KGC' ),
   Out( <Get_Masterpkey(~Masterskey), 'KGC'> )
   ]

rule (modulo E) Create_Id:
   [ Fr( ~ID ), !Make_Masterskey( Masterskey, 'KGC' ) ]
  --[
  Create_ID( $User,
             <Get_Masterpkey(Masterskey), KGCskey(Masterskey, $User)>
  )
  ]->
   [
   !UserID( Get_Masterpkey(Masterskey), KGCskey(Masterskey, $User), $User,
            ~ID
   )
   ]

rule (modulo E) Attacker_Get_Masterskey:
   [ !Make_Masterskey( Masterskey, 'KGC' ) ]
  --[ Oracle( 'MsterKey', 'KGC' ) ]->
   [ Out( Masterskey ) ]

rule (modulo E) Attacker_Get_Usersey:
   [ !UserID( Masterpkey, Userskey, $User, ~ID ) ]
  --[ Oracle( 'UserKey', $User ) ]->
   [ Out( Userskey ) ]

rule (modulo E) Attacker_make_ciphertxt:
   [ Fr( m_ ), Fr( ~Masterskey ) ]
  --[ Oracle( 'MsterKey', 'KGC' ) ]->
   [
   Out( enc(<'MsterKey', 'KGC', m_>, ~Masterskey) ),
   St_Oracle( enc(<'MsterKey', 'KGC', m_>, ~Masterskey) )
   ]

rule (modulo E) Sender_encrypt:
   [ Fr( ~m ), Fr( ~nonce ), !UserID( Masterpkey, Userskey, 'a', ~ID ) ]
  --[
  Send( 'UserKey', $User, enc(<'MsterKey', 'KGC', ~m>, Userskey) ),
  Secret( ~nonce ), Run( 'a', 'b', ~nonce ), Signed( 'a', <~nonce, 'a'> ),
  Role( 'Sender' )
  ]->
   [
   Out( <enc(<~nonce, 'a'>, KGCpkey(Masterpkey, 'b')), 
         KGCpkey(Masterpkey, 'b'), sign(<~nonce, 'a'>, Userskey)>
   ),
   St_Sender( Masterpkey, Userskey, ~ID, ~nonce ),
   St_ReceiveKey( ~m, Masterpkey )
   ]

rule (modulo E) Encrypt_Attacker:
   [
   !Make_Masterskey( ~Masterskey, 'KGC' ), In( <'MsterKey', 'KGC', m_> ),
   In( <'UserKey', $User, ~m> ), St_Oracle( m_ ), Fr( ~nonce )
   ]
  --[
  Send( 'MsterKey', 'KGC', enc(<'MsterKey', 'KGC', m_>, ~Masterskey) ),
  Secret( ~nonce ), Role( 'Oracle' ), Attacker_send_plain( m_ )
  ]->
   [
   Out( enc(<'MsterKey', 'KGC', m_>, ~Masterskey) ),
   St_ReceiveKey_Oracle_ciphertext( enc(<'MsterKey', 'KGC', m_>,
                                        ~Masterskey)
   )
   ]

rule (modulo E) Dec_Oracle:
   [
   In( <c, ~nonce, 'a'> ), !UserID( Masterpkey, Userskey, 'b', ~ID ),
   St_Sender( Masterpkey, Userskey, ~ID, ~nonce ),
   St_Oracle( enc(<'MsterKey', 'KGC', m_>, ~Masterskey) ),
   In( <'MsterKey', 'KGC', ca> ), In( <'UserKey', $User, cb> ), Fr( m_ ),
   Fr( ~Masterskey )
   ]
  --[
  Eq( true, verify(c, dec(c, Userskey), KGCpkey(Masterpkey, 'a')) ),
  Run( 'b', 'a', fst(dec(c, Userskey)) )
  ]->
   [
   Out( dec(<diff(<'MsterKey', 'KGC', ca>, <'UserKey', $User, cb>), 
             fst(dec(c, Userskey))>,
            ~Masterskey)
   ),
   St_Receiver( Masterpkey, Userskey, ~ID, ~nonce ),
   St_ReceiveKey_Oracle_ciphertext( enc(<'MsterKey', 'KGC', m_>,
                                        ~Masterskey)
   )
   ]

rule (modulo E) Decrypt_Attacker:
   [
   St_ReceiveKey_Oracle_ciphertext( enc(<'MsterKey', 'KGC', m_>,
                                        ~Masterskey)
   ),
   In( c_ ), St_ReceiveKey( ~m, Masterpkey ),
   In( <enc(dec(c_, Userskey), KGCpkey(Masterpkey, 'b')), 
        KGCpkey(Masterpkey, 'b'), sign(dec(c_, Userskey), Userskey)>
   ),
   St_Receiver( Masterpkey, Userskey, ~ID, ~nonce ), Fr( m_ ),
   Fr( ~Masterskey )
   ]
  --[
  Finish( ), Notequalvalue( <~m, dec(c_, Userskey)> ), Secretmessage( ~m ),
  Commit( 'a', 'b', ~nonce ), Verified( 'alice', 'bob', dec(c_, Userskey) )
  ]->
   [ ]

restriction OnlyOnce [right]:
  "∀ #i #j. ((OnlyOnce( ) @ #i) ∧ (OnlyOnce( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction OnlyOnce [left]:
  "∀ #i #j. ((OnlyOnce( ) @ #i) ∧ (OnlyOnce( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma check_aliveness [right]:
  all-traces
  "∀ x y t #i.
    (Commit( x, y, t ) @ #i) ⇒
    ((∃ id #j. Create_ID( y, id ) @ #j) ∨
     (∃ #r. Oracle( 'MsterKey', 'KGC' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ x y t #i.
  (Commit( x, y, t ) @ #i)
 ∧
  (∀ id #j. (Create_ID( y, id ) @ #j) ⇒ ⊥) ∧
  (∀ #r. (Oracle( 'MsterKey', 'KGC' ) @ #r) ⇒ ⊥)"
*/
simplify
by solve( St_ReceiveKey_Oracle_ciphertext( enc(<'MsterKey', 'KGC', ~n>,
                                               ~Masterskey)
          ) ▶₀ #i )

lemma check_aliveness [left]:
  all-traces
  "∀ x y t #i.
    (Commit( x, y, t ) @ #i) ⇒
    ((∃ id #j. Create_ID( y, id ) @ #j) ∨
     (∃ #r. Oracle( 'MsterKey', 'KGC' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ x y t #i.
  (Commit( x, y, t ) @ #i)
 ∧
  (∀ id #j. (Create_ID( y, id ) @ #j) ⇒ ⊥) ∧
  (∀ #r. (Oracle( 'MsterKey', 'KGC' ) @ #r) ⇒ ⊥)"
*/
simplify
by solve( St_ReceiveKey_Oracle_ciphertext( enc(<'MsterKey', 'KGC', ~n>,
                                               ~Masterskey)
          ) ▶₀ #i )

lemma check_noninjective_agreement [right]:
  all-traces
  "∀ x y t #i.
    (Commit( x, y, t ) @ #i) ⇒
    (((∃ t.1 #j. Run( y, x, t.1 ) @ #j) ∨
      (∃ #r. Oracle( 'UserKey', 'b' ) @ #r)) ∨
     (∃ #j. Oracle( 'MsterKey', 'KGC' ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ x y t #i.
  (Commit( x, y, t ) @ #i)
 ∧
  (∀ t.1 #j. (Run( y, x, t.1 ) @ #j) ⇒ ⊥) ∧
  (∀ #r. (Oracle( 'UserKey', 'b' ) @ #r) ⇒ ⊥) ∧
  (∀ #j. (Oracle( 'MsterKey', 'KGC' ) @ #j) ⇒ ⊥)"
*/
simplify
by solve( St_ReceiveKey_Oracle_ciphertext( enc(<'MsterKey', 'KGC', ~n>,
                                               ~Masterskey)
          ) ▶₀ #i )

lemma check_noninjective_agreement [left]:
  all-traces
  "∀ x y t #i.
    (Commit( x, y, t ) @ #i) ⇒
    (((∃ t.1 #j. Run( y, x, t.1 ) @ #j) ∨
      (∃ #r. Oracle( 'UserKey', 'b' ) @ #r)) ∨
     (∃ #j. Oracle( 'MsterKey', 'KGC' ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ x y t #i.
  (Commit( x, y, t ) @ #i)
 ∧
  (∀ t.1 #j. (Run( y, x, t.1 ) @ #j) ⇒ ⊥) ∧
  (∀ #r. (Oracle( 'UserKey', 'b' ) @ #r) ⇒ ⊥) ∧
  (∀ #j. (Oracle( 'MsterKey', 'KGC' ) @ #j) ⇒ ⊥)"
*/
simplify
by solve( St_ReceiveKey_Oracle_ciphertext( enc(<'MsterKey', 'KGC', ~n>,
                                               ~Masterskey)
          ) ▶₀ #i )

lemma check_injective_agreement [right]:
  all-traces
  "∀ x y t #i.
    (Commit( x, y, t ) @ #i) ⇒
    ((∃ #j.
       ((Run( y, x, t ) @ #j) ∧ (#j < #i)) ∧
       (¬(∃ z w #k. (Commit( z, w, t ) @ #k) ∧ (¬(#k = #i))))) ∨
     (∃ #r. Oracle( 'MsterKey', 'KGC' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ x y t #i.
  (Commit( x, y, t ) @ #i)
 ∧
  (∀ #j.
    (Run( y, x, t ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨ (∃ z w #k. (Commit( z, w, t ) @ #k) ∧ ¬(#k = #i)))) ∧
  (∀ #r. (Oracle( 'MsterKey', 'KGC' ) @ #r) ⇒ ⊥)"
*/
simplify
by solve( St_ReceiveKey_Oracle_ciphertext( enc(<'MsterKey', 'KGC', ~n>,
                                               ~Masterskey)
          ) ▶₀ #i )

lemma check_injective_agreement [left]:
  all-traces
  "∀ x y t #i.
    (Commit( x, y, t ) @ #i) ⇒
    ((∃ #j.
       ((Run( y, x, t ) @ #j) ∧ (#j < #i)) ∧
       (¬(∃ z w #k. (Commit( z, w, t ) @ #k) ∧ (¬(#k = #i))))) ∨
     (∃ #r. Oracle( 'MsterKey', 'KGC' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ x y t #i.
  (Commit( x, y, t ) @ #i)
 ∧
  (∀ #j.
    (Run( y, x, t ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨ (∃ z w #k. (Commit( z, w, t ) @ #k) ∧ ¬(#k = #i)))) ∧
  (∀ #r. (Oracle( 'MsterKey', 'KGC' ) @ #r) ⇒ ⊥)"
*/
simplify
by solve( St_ReceiveKey_Oracle_ciphertext( enc(<'MsterKey', 'KGC', ~n>,
                                               ~Masterskey)
          ) ▶₀ #i )

lemma nonce_secrecy [right]:
  all-traces
  "∀ s #i.
    (Secret( s ) @ #i) ⇒
    ((((¬(∃ #j. K( s ) @ #j)) ∨ (∃ #l. Oracle( 'UserKey', 'a' ) @ #l)) ∨
      (∃ #l. Oracle( 'UserKey', 'b' ) @ #l)) ∨
     (∃ #l. Oracle( 'MsterKey', 'KGC' ) @ #l))"
/*
guarded formula characterizing all counter-examples:
"∃ s #i.
  (Secret( s ) @ #i)
 ∧
  (∃ #j. (K( s ) @ #j)) ∧
  (∀ #l. (Oracle( 'UserKey', 'a' ) @ #l) ⇒ ⊥) ∧
  (∀ #l. (Oracle( 'UserKey', 'b' ) @ #l) ⇒ ⊥) ∧
  (∀ #l. (Oracle( 'MsterKey', 'KGC' ) @ #l) ⇒ ⊥)"
*/
simplify
solve( Secret( s ) @ #i )
  case Encrypt_Attacker
  solve( !Make_Masterskey( ~Masterskey, 'KGC' ) ▶₀ #i )
    case Setup
    solve( St_Oracle( m_ ) ▶₃ #i )
      case Attacker_make_ciphertxt
      by contradiction /* from formulas */
    qed
  qed
next
  case Sender_encrypt
  solve( !UserID( Masterpkey, Userskey, 'a', ~ID ) ▶₂ #i )
    case Create_Id
    solve( !KU( ~nonce ) @ #vk )
      case Sender_encrypt
      solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.1 )
        case Attacker_Get_Usersey
        by contradiction /* from formulas */
      next
        case c_KGCskey
        solve( !KU( ~Masterskey ) @ #vk.2 )
          case Attacker_Get_Masterskey
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma nonce_secrecy [left]:
  all-traces
  "∀ s #i.
    (Secret( s ) @ #i) ⇒
    ((((¬(∃ #j. K( s ) @ #j)) ∨ (∃ #l. Oracle( 'UserKey', 'a' ) @ #l)) ∨
      (∃ #l. Oracle( 'UserKey', 'b' ) @ #l)) ∨
     (∃ #l. Oracle( 'MsterKey', 'KGC' ) @ #l))"
/*
guarded formula characterizing all counter-examples:
"∃ s #i.
  (Secret( s ) @ #i)
 ∧
  (∃ #j. (K( s ) @ #j)) ∧
  (∀ #l. (Oracle( 'UserKey', 'a' ) @ #l) ⇒ ⊥) ∧
  (∀ #l. (Oracle( 'UserKey', 'b' ) @ #l) ⇒ ⊥) ∧
  (∀ #l. (Oracle( 'MsterKey', 'KGC' ) @ #l) ⇒ ⊥)"
*/
simplify
solve( Secret( s ) @ #i )
  case Encrypt_Attacker
  solve( !Make_Masterskey( ~Masterskey, 'KGC' ) ▶₀ #i )
    case Setup
    solve( St_Oracle( m_ ) ▶₃ #i )
      case Attacker_make_ciphertxt
      by contradiction /* from formulas */
    qed
  qed
next
  case Sender_encrypt
  solve( !UserID( Masterpkey, Userskey, 'a', ~ID ) ▶₂ #i )
    case Create_Id
    solve( !KU( ~nonce ) @ #vk )
      case Sender_encrypt
      solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.1 )
        case Attacker_Get_Usersey
        by contradiction /* from formulas */
      next
        case c_KGCskey
        solve( !KU( ~Masterskey ) @ #vk.2 )
          case Attacker_Get_Masterskey
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma ow_value_notequal [right]:
  all-traces
  "∀ #i #j x.
    ((Notequalvalue( x ) @ #i) ∧ (Notequalvalue( x ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ #i #j x.
  (Notequalvalue( x ) @ #i) ∧ (Notequalvalue( x ) @ #j) ∧ ¬(#i = #j)"
*/
simplify
solve( (#i < #j)  ∥ (#j < #i) )
  case case_1
  by solve( St_ReceiveKey_Oracle_ciphertext( enc(<'MsterKey', 'KGC', ~n>,
                                                 ~Masterskey)
            ) ▶₀ #i )
next
  case case_2
  by solve( St_ReceiveKey_Oracle_ciphertext( enc(<'MsterKey', 'KGC', ~n>,
                                                 ~Masterskey)
            ) ▶₀ #i )
qed

lemma ow_value_notequal [left]:
  all-traces
  "∀ #i #j x.
    ((Notequalvalue( x ) @ #i) ∧ (Notequalvalue( x ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ #i #j x.
  (Notequalvalue( x ) @ #i) ∧ (Notequalvalue( x ) @ #j) ∧ ¬(#i = #j)"
*/
simplify
solve( (#i < #j)  ∥ (#j < #i) )
  case case_1
  by solve( St_ReceiveKey_Oracle_ciphertext( enc(<'MsterKey', 'KGC', ~n>,
                                                 ~Masterskey)
            ) ▶₀ #i )
next
  case case_2
  by solve( St_ReceiveKey_Oracle_ciphertext( enc(<'MsterKey', 'KGC', ~n>,
                                                 ~Masterskey)
            ) ▶₀ #i )
qed

lemma ow_m_secret [right]:
  all-traces "∀ m #i. (Secretmessage( m ) @ #i) ⇒ (¬(∃ #j. K( m ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ m #i. (Secretmessage( m ) @ #i) ∧ ∃ #j. (K( m ) @ #j)"
*/
simplify
by solve( St_ReceiveKey_Oracle_ciphertext( enc(<'MsterKey', 'KGC', ~n>,
                                               ~Masterskey)
          ) ▶₀ #i )

lemma ow_m_secret [left]:
  all-traces "∀ m #i. (Secretmessage( m ) @ #i) ⇒ (¬(∃ #j. K( m ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ m #i. (Secretmessage( m ) @ #i) ∧ ∃ #j. (K( m ) @ #j)"
*/
simplify
by solve( St_ReceiveKey_Oracle_ciphertext( enc(<'MsterKey', 'KGC', ~n>,
                                               ~Masterskey)
          ) ▶₀ #i )

lemma unforgeability [right]:
  all-traces
  "∀ A B m #i.
    (Verified( A, B, m ) @ #i) ⇒
    ((∃ #j. (Signed( A, m ) @ #j) ∧ (#j < #i)) ∨
     (∃ #k. (Oracle( A, B ) @ #k) ∧ (#k < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ A B m #i.
  (Verified( A, B, m ) @ #i)
 ∧
  (∀ #j. (Signed( A, m ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #k. (Oracle( A, B ) @ #k) ⇒ ¬(#k < #i))"
*/
simplify
by solve( St_ReceiveKey_Oracle_ciphertext( enc(<'MsterKey', 'KGC', ~n>,
                                               ~Masterskey)
          ) ▶₀ #i )

lemma unforgeability [left]:
  all-traces
  "∀ A B m #i.
    (Verified( A, B, m ) @ #i) ⇒
    ((∃ #j. (Signed( A, m ) @ #j) ∧ (#j < #i)) ∨
     (∃ #k. (Oracle( A, B ) @ #k) ∧ (#k < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ A B m #i.
  (Verified( A, B, m ) @ #i)
 ∧
  (∀ #j. (Signed( A, m ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #k. (Oracle( A, B ) @ #k) ⇒ ¬(#k < #i))"
*/
simplify
by solve( St_ReceiveKey_Oracle_ciphertext( enc(<'MsterKey', 'KGC', ~n>,
                                               ~Masterskey)
          ) ▶₀ #i )

diffLemma Observational_equivalence:
rule-equivalence
  case Rule_Attacker_Get_Masterskey
  backward-search
    case LHS
    step( simplify )
    step( solve( !Make_Masterskey( Masterskey, 'KGC' ) ▶₀ #i ) )
      case Setup
      MIRRORED
    qed
  next
    case RHS
    step( simplify )
    step( solve( !Make_Masterskey( Masterskey, 'KGC' ) ▶₀ #i ) )
      case Setup
      MIRRORED
    qed
  qed
next
  case Rule_Attacker_Get_Usersey
  backward-search
    case LHS
    step( simplify )
    step( solve( !UserID( Masterpkey, Userskey, $User, ~ID ) ▶₀ #i ) )
      case Create_Id
      MIRRORED
    qed
  next
    case RHS
    step( simplify )
    step( solve( !UserID( Masterpkey, Userskey, $User, ~ID ) ▶₀ #i ) )
      case Create_Id
      MIRRORED
    qed
  qed
next
  case Rule_Attacker_make_ciphertxt
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_Create_Id
  backward-search
    case LHS
    step( simplify )
    step( solve( !Make_Masterskey( Masterskey, 'KGC' ) ▶₁ #i ) )
      case Setup
      MIRRORED
    qed
  next
    case RHS
    step( simplify )
    step( solve( !Make_Masterskey( Masterskey, 'KGC' ) ▶₁ #i ) )
      case Setup
      MIRRORED
    qed
  qed
next
  case Rule_Dec_Oracle
  backward-search
    case LHS
    step( simplify )
    step( solve( !UserID( Masterpkey, Userskey, 'b', ~ID ) ▶₁ #i ) )
      case Create_Id
      by step( solve( St_Sender( Get_Masterpkey(~Masterskey),
                                 KGCskey(~Masterskey, 'b'), ~ID, ~nonce
                      ) ▶₂ #i ) )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !UserID( Masterpkey, Userskey, 'b', ~ID ) ▶₁ #i ) )
      case Create_Id
      by step( solve( St_Sender( Get_Masterpkey(~Masterskey),
                                 KGCskey(~Masterskey, 'b'), ~ID, ~nonce
                      ) ▶₂ #i ) )
    qed
  qed
next
  case Rule_Decrypt_Attacker
  backward-search
    case LHS
    step( simplify )
    by step( solve( St_ReceiveKey_Oracle_ciphertext( enc(<'MsterKey', 'KGC', 
                                                          ~n>,
                                                         ~Masterskey)
                    ) ▶₀ #i ) )
  next
    case RHS
    step( simplify )
    by step( solve( St_ReceiveKey_Oracle_ciphertext( enc(<'MsterKey', 'KGC', 
                                                          ~n>,
                                                         ~Masterskey)
                    ) ▶₀ #i ) )
  qed
next
  case Rule_Destrd_0_dec
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( enc(message, KGCpkey(Get_Masterpkey(Masterskey), User))
                 ) ▶₀ #i ) )
      case Attacker_Get_Masterskey
      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr ) )
        case Setup
        by step( contradiction /* impossible chain */ )
      qed
    next
      case Attacker_Get_Usersey
      step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr ) )
        case Create_Id
        by step( contradiction /* impossible chain */ )
      qed
    next
      case Attacker_make_ciphertxt
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case Dec_Oracle
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case Encrypt_Attacker
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case Sender_encrypt
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_dec
          by step( contradiction /* impossible chain */ )
        next
          case enc
          step( solve( !UserID( Get_Masterpkey(Masterskey), Userskey, 'a', ~ID
                       ) ▶₂ #vr ) )
            case Create_Id
            step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk ) )
              case Attacker_Get_Usersey
              MIRRORED
            next
              case c_KGCskey
              step( solve( !KU( ~Masterskey ) @ #vk.1 ) )
                case Attacker_Get_Masterskey
                step( solve( !KU( 'b' ) @ #vk.2 ) )
                  case coerce
                  step( solve( !KD( 'b' ) ▶₀ #vk.2 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.5 ) )
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_Get_Usersey
                    step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.5 ) )
                      case Create_Id
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_make_ciphertxt
                    by step( contradiction /* impossible chain */ )
                  next
                    case Dec_Oracle
                    by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                  next
                    case Encrypt_Attacker
                    by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                  next
                    case Sender_encrypt
                    step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        case d_0_dec
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.7, 0) ~~> (#vk.2, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk.2, 0) ) )
                          case d_0_verify
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case pub
                  MIRRORED
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
        next
          case d_0_snd
          step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
            case d_0_verify
            by step( contradiction /* impossible chain */ )
          qed
        qed
      qed
    next
      case Setup
      by step( contradiction /* impossible chain */ )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( enc(message, KGCpkey(Get_Masterpkey(Masterskey), User))
                 ) ▶₀ #i ) )
      case Attacker_Get_Masterskey
      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr ) )
        case Setup
        by step( contradiction /* impossible chain */ )
      qed
    next
      case Attacker_Get_Usersey
      step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr ) )
        case Create_Id
        by step( contradiction /* impossible chain */ )
      qed
    next
      case Attacker_make_ciphertxt
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case Dec_Oracle
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case Encrypt_Attacker
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case Sender_encrypt
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_dec
          by step( contradiction /* impossible chain */ )
        next
          case enc
          step( solve( !UserID( Get_Masterpkey(Masterskey), Userskey, 'a', ~ID
                       ) ▶₂ #vr ) )
            case Create_Id
            step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk ) )
              case Attacker_Get_Usersey
              MIRRORED
            next
              case c_KGCskey
              step( solve( !KU( ~Masterskey ) @ #vk.1 ) )
                case Attacker_Get_Masterskey
                step( solve( !KU( 'b' ) @ #vk.2 ) )
                  case coerce
                  step( solve( !KD( 'b' ) ▶₀ #vk.2 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.5 ) )
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_Get_Usersey
                    step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.5 ) )
                      case Create_Id
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_make_ciphertxt
                    by step( contradiction /* impossible chain */ )
                  next
                    case Dec_Oracle
                    by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                  next
                    case Encrypt_Attacker
                    by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                  next
                    case Sender_encrypt
                    step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        case d_0_dec
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.7, 0) ~~> (#vk.2, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk.2, 0) ) )
                          case d_0_verify
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case pub
                  MIRRORED
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
        next
          case d_0_snd
          step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
            case d_0_verify
            by step( contradiction /* impossible chain */ )
          qed
        qed
      qed
    next
      case Setup
      by step( contradiction /* impossible chain */ )
    qed
  qed
next
  case Rule_Destrd_0_fst
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case Attacker_Get_Masterskey
      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr ) )
        case Setup
        by step( contradiction /* impossible chain */ )
      qed
    next
      case Attacker_Get_Usersey
      step( solve( !UserID( Masterpkey, t, $User, ~ID ) ▶₀ #vr ) )
        case Create_Id
        by step( contradiction /* impossible chain */ )
      qed
    next
      case Attacker_make_ciphertxt
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case Dec_Oracle
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case Encrypt_Attacker
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case Sender_encrypt
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_dec
          step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          next
            case pair
            step( solve( !UserID( Get_Masterpkey(Masterskey), Userskey, 'a', ~ID
                         ) ▶₂ #vr ) )
              case Create_Id
              step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk ) )
                case Attacker_Get_Usersey
                MIRRORED
              next
                case c_KGCskey
                step( solve( !KU( ~Masterskey ) @ #vk.1 ) )
                  case Attacker_Get_Masterskey
                  step( solve( !KU( 'b' ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( 'b' ) ▶₀ #vk.2 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.6 ) )
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_Get_Usersey
                      step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.6 ) )
                        case Create_Id
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_make_ciphertxt
                      by step( contradiction /* impossible chain */ )
                    next
                      case Dec_Oracle
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case Encrypt_Attacker
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case Sender_encrypt
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.7, 0) ~~> (#vk.2, 0) ) )
                          case d_0_dec
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk.2, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk.2, 0) ) )
                            case d_0_verify
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
        next
          case d_0_snd
          step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
            case d_0_verify
            by step( contradiction /* impossible chain */ )
          qed
        next
          case pair
          step( solve( !UserID( Masterpkey, Userskey, 'a', ~ID ) ▶₂ #vr ) )
            case Create_Id
            MIRRORED
          qed
        qed
      next
        case pair
        step( solve( !UserID( Masterpkey, Userskey, 'a', ~ID ) ▶₂ #vr ) )
          case Create_Id
          MIRRORED
        qed
      qed
    next
      case Setup
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( contradiction /* impossible chain */ )
      next
        case pair
        MIRRORED
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case Attacker_Get_Masterskey
      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr ) )
        case Setup
        by step( contradiction /* impossible chain */ )
      qed
    next
      case Attacker_Get_Usersey
      step( solve( !UserID( Masterpkey, t, $User, ~ID ) ▶₀ #vr ) )
        case Create_Id
        by step( contradiction /* impossible chain */ )
      qed
    next
      case Attacker_make_ciphertxt
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case Dec_Oracle
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case Encrypt_Attacker
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case Sender_encrypt
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_dec
          step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          next
            case pair
            step( solve( !UserID( Get_Masterpkey(Masterskey), Userskey, 'a', ~ID
                         ) ▶₂ #vr ) )
              case Create_Id
              step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk ) )
                case Attacker_Get_Usersey
                MIRRORED
              next
                case c_KGCskey
                step( solve( !KU( ~Masterskey ) @ #vk.1 ) )
                  case Attacker_Get_Masterskey
                  step( solve( !KU( 'b' ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( 'b' ) ▶₀ #vk.2 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.6 ) )
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_Get_Usersey
                      step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.6 ) )
                        case Create_Id
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_make_ciphertxt
                      by step( contradiction /* impossible chain */ )
                    next
                      case Dec_Oracle
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case Encrypt_Attacker
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case Sender_encrypt
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.7, 0) ~~> (#vk.2, 0) ) )
                          case d_0_dec
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk.2, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk.2, 0) ) )
                            case d_0_verify
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
        next
          case d_0_snd
          step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
            case d_0_verify
            by step( contradiction /* impossible chain */ )
          qed
        next
          case pair
          step( solve( !UserID( Masterpkey, Userskey, 'a', ~ID ) ▶₂ #vr ) )
            case Create_Id
            MIRRORED
          qed
        qed
      next
        case pair
        step( solve( !UserID( Masterpkey, Userskey, 'a', ~ID ) ▶₂ #vr ) )
          case Create_Id
          MIRRORED
        qed
      qed
    next
      case Setup
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( contradiction /* impossible chain */ )
      next
        case pair
        MIRRORED
      qed
    qed
  qed
next
  case Rule_Destrd_0_snd
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case Attacker_Get_Masterskey
      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr ) )
        case Setup
        by step( contradiction /* impossible chain */ )
      qed
    next
      case Attacker_Get_Usersey
      step( solve( !UserID( Masterpkey, t, $User, ~ID ) ▶₀ #vr ) )
        case Create_Id
        by step( contradiction /* impossible chain */ )
      qed
    next
      case Attacker_make_ciphertxt
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case Dec_Oracle
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case Encrypt_Attacker
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case Sender_encrypt
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_dec
          step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          next
            case pair
            step( solve( !UserID( Get_Masterpkey(Masterskey), Userskey, 'a', ~ID
                         ) ▶₂ #vr ) )
              case Create_Id
              step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk ) )
                case Attacker_Get_Usersey
                MIRRORED
              next
                case c_KGCskey
                step( solve( !KU( ~Masterskey ) @ #vk.1 ) )
                  case Attacker_Get_Masterskey
                  step( solve( !KU( 'b' ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( 'b' ) ▶₀ #vk.2 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.6 ) )
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_Get_Usersey
                      step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.6 ) )
                        case Create_Id
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_make_ciphertxt
                      by step( contradiction /* impossible chain */ )
                    next
                      case Dec_Oracle
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case Encrypt_Attacker
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case Sender_encrypt
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.7, 0) ~~> (#vk.2, 0) ) )
                          case d_0_dec
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk.2, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk.2, 0) ) )
                            case d_0_verify
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
        next
          case d_0_snd
          step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
            case d_0_verify
            by step( contradiction /* impossible chain */ )
          qed
        next
          case pair
          step( solve( !UserID( Masterpkey, Userskey, 'a', ~ID ) ▶₂ #vr ) )
            case Create_Id
            MIRRORED
          qed
        qed
      next
        case pair
        step( solve( !UserID( Masterpkey, Userskey, 'a', ~ID ) ▶₂ #vr ) )
          case Create_Id
          MIRRORED
        qed
      qed
    next
      case Setup
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( contradiction /* impossible chain */ )
      next
        case pair
        MIRRORED
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case Attacker_Get_Masterskey
      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr ) )
        case Setup
        by step( contradiction /* impossible chain */ )
      qed
    next
      case Attacker_Get_Usersey
      step( solve( !UserID( Masterpkey, t, $User, ~ID ) ▶₀ #vr ) )
        case Create_Id
        by step( contradiction /* impossible chain */ )
      qed
    next
      case Attacker_make_ciphertxt
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case Dec_Oracle
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case Encrypt_Attacker
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case Sender_encrypt
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_dec
          step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          next
            case pair
            step( solve( !UserID( Get_Masterpkey(Masterskey), Userskey, 'a', ~ID
                         ) ▶₂ #vr ) )
              case Create_Id
              step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk ) )
                case Attacker_Get_Usersey
                MIRRORED
              next
                case c_KGCskey
                step( solve( !KU( ~Masterskey ) @ #vk.1 ) )
                  case Attacker_Get_Masterskey
                  step( solve( !KU( 'b' ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( 'b' ) ▶₀ #vk.2 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.6 ) )
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_Get_Usersey
                      step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.6 ) )
                        case Create_Id
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_make_ciphertxt
                      by step( contradiction /* impossible chain */ )
                    next
                      case Dec_Oracle
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case Encrypt_Attacker
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case Sender_encrypt
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.7, 0) ~~> (#vk.2, 0) ) )
                          case d_0_dec
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk.2, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk.2, 0) ) )
                            case d_0_verify
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
        next
          case d_0_snd
          step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
            case d_0_verify
            by step( contradiction /* impossible chain */ )
          qed
        next
          case pair
          step( solve( !UserID( Masterpkey, Userskey, 'a', ~ID ) ▶₂ #vr ) )
            case Create_Id
            MIRRORED
          qed
        qed
      next
        case pair
        step( solve( !UserID( Masterpkey, Userskey, 'a', ~ID ) ▶₂ #vr ) )
          case Create_Id
          MIRRORED
        qed
      qed
    next
      case Setup
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( contradiction /* impossible chain */ )
      next
        case pair
        MIRRORED
      qed
    qed
  qed
next
  case Rule_Destrd_0_verify
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( sign(message, KGCskey(Masterskey, User)) ) ▶₀ #i ) )
      case Attacker_Get_Masterskey
      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr ) )
        case Setup
        by step( contradiction /* impossible chain */ )
      qed
    next
      case Attacker_Get_Usersey
      step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr ) )
        case Create_Id
        by step( contradiction /* impossible chain */ )
      qed
    next
      case Attacker_make_ciphertxt
      by step( contradiction /* impossible chain */ )
    next
      case Dec_Oracle
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case Encrypt_Attacker
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case Sender_encrypt
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_dec
          by step( contradiction /* impossible chain */ )
        qed
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
        next
          case d_0_snd
          step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
            case d_0_verify
            by step( contradiction /* impossible chain */ )
          next
            case sign
            step( solve( !UserID( Masterpkey, KGCskey(Masterskey, User), 'a', ~ID
                         ) ▶₂ #vr ) )
              case Create_Id
              step( solve( !KU( ~nonce ) @ #vk.2 ) )
                case Sender_encrypt
                step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'a') ) @ #vk.2 ) )
                  case c_KGCpkey
                  step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.4 ) )
                    case Attacker_Get_Usersey
                    step( solve( !KU( 'a' ) @ #vk.4 ) )
                      case coerce
                      step( solve( !KD( 'a' ) ▶₀ #vk.4 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.10 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( contradiction /* cyclic */ )
                      next
                        case Encrypt_Attacker
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.11, 0) ~~> (#vk.4, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.11, 0) ~~> (#vk.4, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.12, 0) ~~> (#vk.4, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.12, 0) ~~> (#vk.4, 0) ) )
                              case d_0_verify
                              by step( contradiction /* cyclic */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.5 ) )
                        case Setup
                        MIRRORED
                      next
                        case c_Get_Masterpkey
                        step( solve( !KU( ~Masterskey ) @ #vk.6 ) )
                          case Attacker_Get_Masterskey
                          MIRRORED
                        qed
                      qed
                    qed
                  next
                    case c_KGCskey
                    step( solve( !KU( ~Masterskey ) @ #vk.6 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !KU( 'a' ) @ #vk.5 ) )
                        case coerce
                        step( solve( !KD( 'a' ) ▶₀ #vk.5 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.9 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( contradiction /* cyclic */ )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.10, 0) ~~> (#vk.5, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.10, 0) ~~> (#vk.5, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.11, 0) ~~> (#vk.5, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.11, 0) ~~> (#vk.5, 0) ) )
                                case d_0_verify
                                by step( contradiction /* cyclic */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.6 ) )
                          case Setup
                          step( solve( !KU( 'b' ) @ #vk.7 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.7 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.10 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.11, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.12, 0) ~~> (#vk.7, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk.7, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        next
                          case c_Get_Masterpkey
                          step( solve( !KU( 'b' ) @ #vk.7 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.7 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.9 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.10, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.10, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.11, 0) ~~> (#vk.7, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.11, 0) ~~> (#vk.7, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Setup
      by step( contradiction /* impossible chain */ )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( sign(message, KGCskey(Masterskey, User)) ) ▶₀ #i ) )
      case Attacker_Get_Masterskey
      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr ) )
        case Setup
        by step( contradiction /* impossible chain */ )
      qed
    next
      case Attacker_Get_Usersey
      step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr ) )
        case Create_Id
        by step( contradiction /* impossible chain */ )
      qed
    next
      case Attacker_make_ciphertxt
      by step( contradiction /* impossible chain */ )
    next
      case Dec_Oracle
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case Encrypt_Attacker
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case Sender_encrypt
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_dec
          by step( contradiction /* impossible chain */ )
        qed
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
        next
          case d_0_snd
          step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
            case d_0_verify
            by step( contradiction /* impossible chain */ )
          next
            case sign
            step( solve( !UserID( Masterpkey, KGCskey(Masterskey, User), 'a', ~ID
                         ) ▶₂ #vr ) )
              case Create_Id
              step( solve( !KU( ~nonce ) @ #vk.2 ) )
                case Sender_encrypt
                step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'a') ) @ #vk.2 ) )
                  case c_KGCpkey
                  step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.4 ) )
                    case Attacker_Get_Usersey
                    step( solve( !KU( 'a' ) @ #vk.4 ) )
                      case coerce
                      step( solve( !KD( 'a' ) ▶₀ #vk.4 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.10 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( contradiction /* cyclic */ )
                      next
                        case Encrypt_Attacker
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.11, 0) ~~> (#vk.4, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.11, 0) ~~> (#vk.4, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.12, 0) ~~> (#vk.4, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.12, 0) ~~> (#vk.4, 0) ) )
                              case d_0_verify
                              by step( contradiction /* cyclic */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.5 ) )
                        case Setup
                        MIRRORED
                      next
                        case c_Get_Masterpkey
                        step( solve( !KU( ~Masterskey ) @ #vk.6 ) )
                          case Attacker_Get_Masterskey
                          MIRRORED
                        qed
                      qed
                    qed
                  next
                    case c_KGCskey
                    step( solve( !KU( ~Masterskey ) @ #vk.6 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !KU( 'a' ) @ #vk.5 ) )
                        case coerce
                        step( solve( !KD( 'a' ) ▶₀ #vk.5 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.9 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( contradiction /* cyclic */ )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.10, 0) ~~> (#vk.5, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.10, 0) ~~> (#vk.5, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.11, 0) ~~> (#vk.5, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.11, 0) ~~> (#vk.5, 0) ) )
                                case d_0_verify
                                by step( contradiction /* cyclic */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.6 ) )
                          case Setup
                          step( solve( !KU( 'b' ) @ #vk.7 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.7 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.10 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.11, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.12, 0) ~~> (#vk.7, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk.7, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        next
                          case c_Get_Masterpkey
                          step( solve( !KU( 'b' ) @ #vk.7 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.7 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.9 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.10, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.10, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.11, 0) ~~> (#vk.7, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.11, 0) ~~> (#vk.7, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Setup
      by step( contradiction /* impossible chain */ )
    qed
  qed
next
  case Rule_Encrypt_Attacker
  backward-search
    case LHS
    step( simplify )
    step( solve( !Make_Masterskey( ~Masterskey, 'KGC' ) ▶₀ #i ) )
      case Setup
      step( solve( St_Oracle( m_ ) ▶₃ #i ) )
        case Attacker_make_ciphertxt
        step( solve( !KU( ~m ) @ #vk.9 ) )
          case Attacker_Get_Masterskey
          step( solve( !KU( 'MsterKey' ) @ #vk.5 ) )
            case coerce
            step( solve( !KD( 'MsterKey' ) ▶₀ #vk.5 ) )
              case Attacker_Get_Masterskey
              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.3 ) )
                case Setup
                by step( contradiction /* impossible chain */ )
              qed
            next
              case Attacker_Get_Usersey
              step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.3 ) )
                case Create_Id
                by step( contradiction /* impossible chain */ )
              qed
            next
              case Attacker_make_ciphertxt
              by step( contradiction /* impossible chain */ )
            next
              case Dec_Oracle
              by step( contradiction /* cyclic */ )
            next
              case Encrypt_Attacker
              by step( contradiction /* cyclic */ )
            next
              case Sender_encrypt
              step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                case d_0_fst
                step( solve( (#vr.4, 0) ~~> (#vk.5, 0) ) )
                  case d_0_dec
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case d_0_snd
                step( solve( (#vr.4, 0) ~~> (#vk.5, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                    case d_0_verify
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              qed
            next
              case Setup
              by step( contradiction /* impossible chain */ )
            qed
          next
            case pub
            step( solve( !KU( 'KGC' ) @ #vk.6 ) )
              case coerce
              step( solve( !KD( 'KGC' ) ▶₀ #vk.6 ) )
                case Attacker_Get_Masterskey
                step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.3 ) )
                  case Setup
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case Attacker_Get_Usersey
                step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.3 ) )
                  case Create_Id
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case Attacker_make_ciphertxt
                by step( contradiction /* impossible chain */ )
              next
                case Dec_Oracle
                by step( contradiction /* cyclic */ )
              next
                case Encrypt_Attacker
                by step( contradiction /* cyclic */ )
              next
                case Sender_encrypt
                step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.4, 0) ~~> (#vk.6, 0) ) )
                    case d_0_dec
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk.6, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                      case d_0_verify
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                qed
              next
                case Setup
                by step( contradiction /* impossible chain */ )
              qed
            next
              case pub
              step( solve( !KU( 'UserKey' ) @ #vk.8 ) )
                case coerce
                step( solve( !KD( 'UserKey' ) ▶₀ #vk.7 ) )
                  case Attacker_Get_Masterskey
                  step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.3 ) )
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Attacker_Get_Usersey
                  step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.3 ) )
                    case Create_Id
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Attacker_make_ciphertxt
                  by step( contradiction /* impossible chain */ )
                next
                  case Dec_Oracle
                  by step( contradiction /* cyclic */ )
                next
                  case Encrypt_Attacker
                  by step( contradiction /* cyclic */ )
                next
                  case Sender_encrypt
                  step( solve( (#vl.1, 0) ~~> (#vk.7, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.4, 0) ~~> (#vk.7, 0) ) )
                      case d_0_dec
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#vk.7, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.5, 0) ~~> (#vk.7, 0) ) )
                    next
                      case d_0_snd
                      step( solve( (#vr.5, 0) ~~> (#vk.7, 0) ) )
                        case d_0_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Setup
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case pub
                step( solve( !KU( $User ) @ #vk.9 ) )
                  case coerce
                  step( solve( !KD( $User ) ▶₀ #vk.8 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.3 ) )
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_Get_Usersey
                    step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.3 ) )
                      case Create_Id
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_make_ciphertxt
                    by step( contradiction /* impossible chain */ )
                  next
                    case Dec_Oracle
                    by step( solve( (#vl.1, 0) ~~> (#vk.8, 0) ) )
                  next
                    case Encrypt_Attacker
                    by step( solve( (#vl.1, 0) ~~> (#vk.8, 0) ) )
                  next
                    case Sender_encrypt
                    step( solve( (#vl.1, 0) ~~> (#vk.8, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.4, 0) ~~> (#vk.8, 0) ) )
                        case d_0_dec
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.5, 0) ~~> (#vk.8, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#vk.8, 0) ) )
                          case d_0_verify
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case pub
                  step( solve( !KU( enc(<'MsterKey', 'KGC', ~n>, ~Masterskey.1)
                               ) @ #vk.9 ) )
                    case Attacker_make_ciphertxt
                    MIRRORED
                  next
                    case c_enc
                    by step( solve( !KU( ~Masterskey.1 ) @ #vk.12 ) )
                  qed
                qed
              qed
            qed
          qed
        next
          case Sender_encrypt
          step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.10 ) )
            case Attacker_Get_Usersey
            step( solve( !KU( 'MsterKey' ) @ #vk.6 ) )
              case coerce
              step( solve( !KD( 'MsterKey' ) ▶₀ #vk.6 ) )
                case Attacker_Get_Masterskey
                step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                  case Setup
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case Attacker_Get_Usersey
                step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.9 ) )
                  case Create_Id
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case Attacker_make_ciphertxt
                by step( contradiction /* impossible chain */ )
              next
                case Dec_Oracle
                by step( contradiction /* cyclic */ )
              next
                case Encrypt_Attacker
                by step( contradiction /* cyclic */ )
              next
                case Sender_encrypt
                step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.10, 0) ~~> (#vk.6, 0) ) )
                    case d_0_dec
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.10, 0) ~~> (#vk.6, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.11, 0) ~~> (#vk.6, 0) ) )
                  next
                    case d_0_snd
                    step( solve( (#vr.11, 0) ~~> (#vk.6, 0) ) )
                      case d_0_verify
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                qed
              next
                case Setup
                by step( contradiction /* impossible chain */ )
              qed
            next
              case pub
              step( solve( !KU( 'KGC' ) @ #vk.7 ) )
                case coerce
                step( solve( !KD( 'KGC' ) ▶₀ #vk.7 ) )
                  case Attacker_Get_Masterskey
                  step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Attacker_Get_Usersey
                  step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.9 ) )
                    case Create_Id
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Attacker_make_ciphertxt
                  by step( contradiction /* impossible chain */ )
                next
                  case Dec_Oracle
                  by step( contradiction /* cyclic */ )
                next
                  case Encrypt_Attacker
                  by step( contradiction /* cyclic */ )
                next
                  case Sender_encrypt
                  step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.10, 0) ~~> (#vk.7, 0) ) )
                      case d_0_dec
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.10, 0) ~~> (#vk.7, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.11, 0) ~~> (#vk.7, 0) ) )
                    next
                      case d_0_snd
                      step( solve( (#vr.11, 0) ~~> (#vk.7, 0) ) )
                        case d_0_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Setup
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case pub
                step( solve( !KU( 'UserKey' ) @ #vk.9 ) )
                  case coerce
                  step( solve( !KD( 'UserKey' ) ▶₀ #vk.8 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_Get_Usersey
                    step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.9 ) )
                      case Create_Id
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_make_ciphertxt
                    by step( contradiction /* impossible chain */ )
                  next
                    case Dec_Oracle
                    by step( contradiction /* cyclic */ )
                  next
                    case Encrypt_Attacker
                    by step( contradiction /* cyclic */ )
                  next
                    case Sender_encrypt
                    step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.10, 0) ~~> (#vk.8, 0) ) )
                        case d_0_dec
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.10, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                          case d_0_verify
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case pub
                  step( solve( !KU( $User ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( $User ) ▶₀ #vk.9 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_Get_Usersey
                      step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.9 ) )
                        case Create_Id
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_make_ciphertxt
                      by step( contradiction /* impossible chain */ )
                    next
                      case Dec_Oracle
                      by step( solve( (#vl.2, 0) ~~> (#vk.9, 0) ) )
                    next
                      case Encrypt_Attacker
                      by step( solve( (#vl.2, 0) ~~> (#vk.9, 0) ) )
                    next
                      case Sender_encrypt
                      step( solve( (#vl.2, 0) ~~> (#vk.9, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.10, 0) ~~> (#vk.9, 0) ) )
                          case d_0_dec
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.10, 0) ~~> (#vk.9, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.11, 0) ~~> (#vk.9, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.11, 0) ~~> (#vk.9, 0) ) )
                            case d_0_verify
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    step( solve( !KU( enc(<'MsterKey', 'KGC', ~n>, ~Masterskey.1)
                                 ) @ #vk.10 ) )
                      case Attacker_make_ciphertxt
                      MIRRORED
                    next
                      case c_enc
                      by step( solve( !KU( ~Masterskey.1 ) @ #vk.13 ) )
                    qed
                  qed
                qed
              qed
            qed
          next
            case c_KGCskey
            step( solve( !KU( ~Masterskey ) @ #vk.11 ) )
              case Attacker_Get_Masterskey
              step( solve( !KU( 'MsterKey' ) @ #vk.7 ) )
                case coerce
                step( solve( !KD( 'MsterKey' ) ▶₀ #vk.7 ) )
                  case Attacker_Get_Masterskey
                  step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.8 ) )
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Attacker_Get_Usersey
                  step( solve( !UserID( Masterpkey, t, $User.2, ~ID.1 ) ▶₀ #vr.8 ) )
                    case Create_Id
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Attacker_make_ciphertxt
                  by step( contradiction /* impossible chain */ )
                next
                  case Dec_Oracle
                  by step( contradiction /* cyclic */ )
                next
                  case Encrypt_Attacker
                  by step( contradiction /* cyclic */ )
                next
                  case Sender_encrypt
                  step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.9, 0) ~~> (#vk.7, 0) ) )
                      case d_0_dec
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.9, 0) ~~> (#vk.7, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.10, 0) ~~> (#vk.7, 0) ) )
                    next
                      case d_0_snd
                      step( solve( (#vr.10, 0) ~~> (#vk.7, 0) ) )
                        case d_0_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Setup
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case pub
                step( solve( !KU( 'KGC' ) @ #vk.8 ) )
                  case coerce
                  step( solve( !KD( 'KGC' ) ▶₀ #vk.8 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.8 ) )
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_Get_Usersey
                    step( solve( !UserID( Masterpkey, t, $User.2, ~ID.1 ) ▶₀ #vr.8 ) )
                      case Create_Id
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_make_ciphertxt
                    by step( contradiction /* impossible chain */ )
                  next
                    case Dec_Oracle
                    by step( contradiction /* cyclic */ )
                  next
                    case Encrypt_Attacker
                    by step( contradiction /* cyclic */ )
                  next
                    case Sender_encrypt
                    step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.9, 0) ~~> (#vk.8, 0) ) )
                        case d_0_dec
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.9, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.10, 0) ~~> (#vk.8, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.10, 0) ~~> (#vk.8, 0) ) )
                          case d_0_verify
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case pub
                  step( solve( !KU( 'UserKey' ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( 'UserKey' ) ▶₀ #vk.9 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.8 ) )
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_Get_Usersey
                      step( solve( !UserID( Masterpkey, t, $User.2, ~ID.1 ) ▶₀ #vr.8 ) )
                        case Create_Id
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_make_ciphertxt
                      by step( contradiction /* impossible chain */ )
                    next
                      case Dec_Oracle
                      by step( contradiction /* cyclic */ )
                    next
                      case Encrypt_Attacker
                      by step( contradiction /* cyclic */ )
                    next
                      case Sender_encrypt
                      step( solve( (#vl.2, 0) ~~> (#vk.9, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.9, 0) ~~> (#vk.9, 0) ) )
                          case d_0_dec
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.9, 0) ~~> (#vk.9, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.10, 0) ~~> (#vk.9, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.10, 0) ~~> (#vk.9, 0) ) )
                            case d_0_verify
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    step( solve( !KU( $User ) @ #vk.11 ) )
                      case coerce
                      step( solve( !KD( $User ) ▶₀ #vk.10 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.8 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.2, ~ID.1 ) ▶₀ #vr.8 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( solve( (#vl.2, 0) ~~> (#vk.10, 0) ) )
                      next
                        case Encrypt_Attacker
                        by step( solve( (#vl.2, 0) ~~> (#vk.10, 0) ) )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.2, 0) ~~> (#vk.10, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.9, 0) ~~> (#vk.10, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.9, 0) ~~> (#vk.10, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.10, 0) ~~> (#vk.10, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.10, 0) ~~> (#vk.10, 0) ) )
                              case d_0_verify
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      step( solve( !KU( enc(<'MsterKey', 'KGC', ~n>, ~Masterskey.1)
                                   ) @ #vk.11 ) )
                        case Attacker_make_ciphertxt
                        step( solve( !KU( 'b' ) @ #vk.12 ) )
                          case coerce
                          step( solve( !KD( 'b' ) ▶₀ #vk.12 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.8 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.2, ~ID.1 ) ▶₀ #vr.8 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( solve( (#vl.3, 0) ~~> (#vk.12, 0) ) )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.12, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.12, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.9, 0) ~~> (#vk.12, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.9, 0) ~~> (#vk.12, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.10, 0) ~~> (#vk.12, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.10, 0) ~~> (#vk.12, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          MIRRORED
                        qed
                      next
                        case c_enc
                        by step( solve( !KU( ~Masterskey.1 ) @ #vk.15 ) )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case fresh
          step( solve( !KU( 'MsterKey' ) @ #vk.5 ) )
            case coerce
            step( solve( !KD( 'MsterKey' ) ▶₀ #vk.5 ) )
              case Attacker_Get_Masterskey
              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.2 ) )
                case Setup
                by step( contradiction /* impossible chain */ )
              qed
            next
              case Attacker_Get_Usersey
              step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.2 ) )
                case Create_Id
                by step( contradiction /* impossible chain */ )
              qed
            next
              case Attacker_make_ciphertxt
              by step( contradiction /* impossible chain */ )
            next
              case Dec_Oracle
              by step( contradiction /* cyclic */ )
            next
              case Encrypt_Attacker
              by step( contradiction /* cyclic */ )
            next
              case Sender_encrypt
              step( solve( (#vl, 0) ~~> (#vk.5, 0) ) )
                case d_0_fst
                step( solve( (#vr.3, 0) ~~> (#vk.5, 0) ) )
                  case d_0_dec
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk.5, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.4, 0) ~~> (#vk.5, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk.5, 0) ) )
                    case d_0_verify
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              qed
            next
              case Setup
              by step( contradiction /* impossible chain */ )
            qed
          next
            case pub
            step( solve( !KU( 'KGC' ) @ #vk.6 ) )
              case coerce
              step( solve( !KD( 'KGC' ) ▶₀ #vk.6 ) )
                case Attacker_Get_Masterskey
                step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.2 ) )
                  case Setup
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case Attacker_Get_Usersey
                step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.2 ) )
                  case Create_Id
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case Attacker_make_ciphertxt
                by step( contradiction /* impossible chain */ )
              next
                case Dec_Oracle
                by step( contradiction /* cyclic */ )
              next
                case Encrypt_Attacker
                by step( contradiction /* cyclic */ )
              next
                case Sender_encrypt
                step( solve( (#vl, 0) ~~> (#vk.6, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.3, 0) ~~> (#vk.6, 0) ) )
                    case d_0_dec
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.3, 0) ~~> (#vk.6, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.4, 0) ~~> (#vk.6, 0) ) )
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#vk.6, 0) ) )
                      case d_0_verify
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                qed
              next
                case Setup
                by step( contradiction /* impossible chain */ )
              qed
            next
              case pub
              step( solve( !KU( 'UserKey' ) @ #vk.8 ) )
                case coerce
                step( solve( !KD( 'UserKey' ) ▶₀ #vk.7 ) )
                  case Attacker_Get_Masterskey
                  step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.2 ) )
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Attacker_Get_Usersey
                  step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.2 ) )
                    case Create_Id
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Attacker_make_ciphertxt
                  by step( contradiction /* impossible chain */ )
                next
                  case Dec_Oracle
                  by step( contradiction /* cyclic */ )
                next
                  case Encrypt_Attacker
                  by step( contradiction /* cyclic */ )
                next
                  case Sender_encrypt
                  step( solve( (#vl, 0) ~~> (#vk.7, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.3, 0) ~~> (#vk.7, 0) ) )
                      case d_0_dec
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.3, 0) ~~> (#vk.7, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.4, 0) ~~> (#vk.7, 0) ) )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#vk.7, 0) ) )
                        case d_0_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Setup
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case pub
                step( solve( !KU( $User ) @ #vk.9 ) )
                  case coerce
                  step( solve( !KD( $User ) ▶₀ #vk.8 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.2 ) )
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_Get_Usersey
                    step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.2 ) )
                      case Create_Id
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_make_ciphertxt
                    by step( contradiction /* impossible chain */ )
                  next
                    case Dec_Oracle
                    by step( solve( (#vl, 0) ~~> (#vk.8, 0) ) )
                  next
                    case Encrypt_Attacker
                    by step( solve( (#vl, 0) ~~> (#vk.8, 0) ) )
                  next
                    case Sender_encrypt
                    step( solve( (#vl, 0) ~~> (#vk.8, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.3, 0) ~~> (#vk.8, 0) ) )
                        case d_0_dec
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.3, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.4, 0) ~~> (#vk.8, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.4, 0) ~~> (#vk.8, 0) ) )
                          case d_0_verify
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case pub
                  step( solve( !KU( enc(<'MsterKey', 'KGC', ~n>, ~Masterskey.1)
                               ) @ #vk.9 ) )
                    case Attacker_make_ciphertxt
                    MIRRORED
                  next
                    case c_enc
                    by step( solve( !KU( ~Masterskey.1 ) @ #vk.12 ) )
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !Make_Masterskey( ~Masterskey, 'KGC' ) ▶₀ #i ) )
      case Setup
      step( solve( St_Oracle( m_ ) ▶₃ #i ) )
        case Attacker_make_ciphertxt
        step( solve( !KU( ~m ) @ #vk.9 ) )
          case Attacker_Get_Masterskey
          step( solve( !KU( 'MsterKey' ) @ #vk.5 ) )
            case coerce
            step( solve( !KD( 'MsterKey' ) ▶₀ #vk.5 ) )
              case Attacker_Get_Masterskey
              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.3 ) )
                case Setup
                by step( contradiction /* impossible chain */ )
              qed
            next
              case Attacker_Get_Usersey
              step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.3 ) )
                case Create_Id
                by step( contradiction /* impossible chain */ )
              qed
            next
              case Attacker_make_ciphertxt
              by step( contradiction /* impossible chain */ )
            next
              case Dec_Oracle
              by step( contradiction /* cyclic */ )
            next
              case Encrypt_Attacker
              by step( contradiction /* cyclic */ )
            next
              case Sender_encrypt
              step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                case d_0_fst
                step( solve( (#vr.4, 0) ~~> (#vk.5, 0) ) )
                  case d_0_dec
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case d_0_snd
                step( solve( (#vr.4, 0) ~~> (#vk.5, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                    case d_0_verify
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              qed
            next
              case Setup
              by step( contradiction /* impossible chain */ )
            qed
          next
            case pub
            step( solve( !KU( 'KGC' ) @ #vk.6 ) )
              case coerce
              step( solve( !KD( 'KGC' ) ▶₀ #vk.6 ) )
                case Attacker_Get_Masterskey
                step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.3 ) )
                  case Setup
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case Attacker_Get_Usersey
                step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.3 ) )
                  case Create_Id
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case Attacker_make_ciphertxt
                by step( contradiction /* impossible chain */ )
              next
                case Dec_Oracle
                by step( contradiction /* cyclic */ )
              next
                case Encrypt_Attacker
                by step( contradiction /* cyclic */ )
              next
                case Sender_encrypt
                step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.4, 0) ~~> (#vk.6, 0) ) )
                    case d_0_dec
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk.6, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                      case d_0_verify
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                qed
              next
                case Setup
                by step( contradiction /* impossible chain */ )
              qed
            next
              case pub
              step( solve( !KU( 'UserKey' ) @ #vk.8 ) )
                case coerce
                step( solve( !KD( 'UserKey' ) ▶₀ #vk.7 ) )
                  case Attacker_Get_Masterskey
                  step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.3 ) )
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Attacker_Get_Usersey
                  step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.3 ) )
                    case Create_Id
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Attacker_make_ciphertxt
                  by step( contradiction /* impossible chain */ )
                next
                  case Dec_Oracle
                  by step( contradiction /* cyclic */ )
                next
                  case Encrypt_Attacker
                  by step( contradiction /* cyclic */ )
                next
                  case Sender_encrypt
                  step( solve( (#vl.1, 0) ~~> (#vk.7, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.4, 0) ~~> (#vk.7, 0) ) )
                      case d_0_dec
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#vk.7, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.5, 0) ~~> (#vk.7, 0) ) )
                    next
                      case d_0_snd
                      step( solve( (#vr.5, 0) ~~> (#vk.7, 0) ) )
                        case d_0_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Setup
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case pub
                step( solve( !KU( $User ) @ #vk.9 ) )
                  case coerce
                  step( solve( !KD( $User ) ▶₀ #vk.8 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.3 ) )
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_Get_Usersey
                    step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.3 ) )
                      case Create_Id
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_make_ciphertxt
                    by step( contradiction /* impossible chain */ )
                  next
                    case Dec_Oracle
                    by step( solve( (#vl.1, 0) ~~> (#vk.8, 0) ) )
                  next
                    case Encrypt_Attacker
                    by step( solve( (#vl.1, 0) ~~> (#vk.8, 0) ) )
                  next
                    case Sender_encrypt
                    step( solve( (#vl.1, 0) ~~> (#vk.8, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.4, 0) ~~> (#vk.8, 0) ) )
                        case d_0_dec
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.5, 0) ~~> (#vk.8, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#vk.8, 0) ) )
                          case d_0_verify
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case pub
                  step( solve( !KU( enc(<'MsterKey', 'KGC', ~n>, ~Masterskey.1)
                               ) @ #vk.9 ) )
                    case Attacker_make_ciphertxt
                    MIRRORED
                  next
                    case c_enc
                    by step( solve( !KU( ~Masterskey.1 ) @ #vk.12 ) )
                  qed
                qed
              qed
            qed
          qed
        next
          case Sender_encrypt
          step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.10 ) )
            case Attacker_Get_Usersey
            step( solve( !KU( 'MsterKey' ) @ #vk.6 ) )
              case coerce
              step( solve( !KD( 'MsterKey' ) ▶₀ #vk.6 ) )
                case Attacker_Get_Masterskey
                step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                  case Setup
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case Attacker_Get_Usersey
                step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.9 ) )
                  case Create_Id
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case Attacker_make_ciphertxt
                by step( contradiction /* impossible chain */ )
              next
                case Dec_Oracle
                by step( contradiction /* cyclic */ )
              next
                case Encrypt_Attacker
                by step( contradiction /* cyclic */ )
              next
                case Sender_encrypt
                step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.10, 0) ~~> (#vk.6, 0) ) )
                    case d_0_dec
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.10, 0) ~~> (#vk.6, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.11, 0) ~~> (#vk.6, 0) ) )
                  next
                    case d_0_snd
                    step( solve( (#vr.11, 0) ~~> (#vk.6, 0) ) )
                      case d_0_verify
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                qed
              next
                case Setup
                by step( contradiction /* impossible chain */ )
              qed
            next
              case pub
              step( solve( !KU( 'KGC' ) @ #vk.7 ) )
                case coerce
                step( solve( !KD( 'KGC' ) ▶₀ #vk.7 ) )
                  case Attacker_Get_Masterskey
                  step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Attacker_Get_Usersey
                  step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.9 ) )
                    case Create_Id
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Attacker_make_ciphertxt
                  by step( contradiction /* impossible chain */ )
                next
                  case Dec_Oracle
                  by step( contradiction /* cyclic */ )
                next
                  case Encrypt_Attacker
                  by step( contradiction /* cyclic */ )
                next
                  case Sender_encrypt
                  step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.10, 0) ~~> (#vk.7, 0) ) )
                      case d_0_dec
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.10, 0) ~~> (#vk.7, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.11, 0) ~~> (#vk.7, 0) ) )
                    next
                      case d_0_snd
                      step( solve( (#vr.11, 0) ~~> (#vk.7, 0) ) )
                        case d_0_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Setup
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case pub
                step( solve( !KU( 'UserKey' ) @ #vk.9 ) )
                  case coerce
                  step( solve( !KD( 'UserKey' ) ▶₀ #vk.8 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_Get_Usersey
                    step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.9 ) )
                      case Create_Id
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_make_ciphertxt
                    by step( contradiction /* impossible chain */ )
                  next
                    case Dec_Oracle
                    by step( contradiction /* cyclic */ )
                  next
                    case Encrypt_Attacker
                    by step( contradiction /* cyclic */ )
                  next
                    case Sender_encrypt
                    step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.10, 0) ~~> (#vk.8, 0) ) )
                        case d_0_dec
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.10, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                          case d_0_verify
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case pub
                  step( solve( !KU( $User ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( $User ) ▶₀ #vk.9 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_Get_Usersey
                      step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.9 ) )
                        case Create_Id
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_make_ciphertxt
                      by step( contradiction /* impossible chain */ )
                    next
                      case Dec_Oracle
                      by step( solve( (#vl.2, 0) ~~> (#vk.9, 0) ) )
                    next
                      case Encrypt_Attacker
                      by step( solve( (#vl.2, 0) ~~> (#vk.9, 0) ) )
                    next
                      case Sender_encrypt
                      step( solve( (#vl.2, 0) ~~> (#vk.9, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.10, 0) ~~> (#vk.9, 0) ) )
                          case d_0_dec
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.10, 0) ~~> (#vk.9, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.11, 0) ~~> (#vk.9, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.11, 0) ~~> (#vk.9, 0) ) )
                            case d_0_verify
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    step( solve( !KU( enc(<'MsterKey', 'KGC', ~n>, ~Masterskey.1)
                                 ) @ #vk.10 ) )
                      case Attacker_make_ciphertxt
                      MIRRORED
                    next
                      case c_enc
                      by step( solve( !KU( ~Masterskey.1 ) @ #vk.13 ) )
                    qed
                  qed
                qed
              qed
            qed
          next
            case c_KGCskey
            step( solve( !KU( ~Masterskey ) @ #vk.11 ) )
              case Attacker_Get_Masterskey
              step( solve( !KU( 'MsterKey' ) @ #vk.7 ) )
                case coerce
                step( solve( !KD( 'MsterKey' ) ▶₀ #vk.7 ) )
                  case Attacker_Get_Masterskey
                  step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.8 ) )
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Attacker_Get_Usersey
                  step( solve( !UserID( Masterpkey, t, $User.2, ~ID.1 ) ▶₀ #vr.8 ) )
                    case Create_Id
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Attacker_make_ciphertxt
                  by step( contradiction /* impossible chain */ )
                next
                  case Dec_Oracle
                  by step( contradiction /* cyclic */ )
                next
                  case Encrypt_Attacker
                  by step( contradiction /* cyclic */ )
                next
                  case Sender_encrypt
                  step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.9, 0) ~~> (#vk.7, 0) ) )
                      case d_0_dec
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.9, 0) ~~> (#vk.7, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.10, 0) ~~> (#vk.7, 0) ) )
                    next
                      case d_0_snd
                      step( solve( (#vr.10, 0) ~~> (#vk.7, 0) ) )
                        case d_0_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Setup
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case pub
                step( solve( !KU( 'KGC' ) @ #vk.8 ) )
                  case coerce
                  step( solve( !KD( 'KGC' ) ▶₀ #vk.8 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.8 ) )
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_Get_Usersey
                    step( solve( !UserID( Masterpkey, t, $User.2, ~ID.1 ) ▶₀ #vr.8 ) )
                      case Create_Id
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_make_ciphertxt
                    by step( contradiction /* impossible chain */ )
                  next
                    case Dec_Oracle
                    by step( contradiction /* cyclic */ )
                  next
                    case Encrypt_Attacker
                    by step( contradiction /* cyclic */ )
                  next
                    case Sender_encrypt
                    step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.9, 0) ~~> (#vk.8, 0) ) )
                        case d_0_dec
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.9, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.10, 0) ~~> (#vk.8, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.10, 0) ~~> (#vk.8, 0) ) )
                          case d_0_verify
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case pub
                  step( solve( !KU( 'UserKey' ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( 'UserKey' ) ▶₀ #vk.9 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.8 ) )
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_Get_Usersey
                      step( solve( !UserID( Masterpkey, t, $User.2, ~ID.1 ) ▶₀ #vr.8 ) )
                        case Create_Id
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_make_ciphertxt
                      by step( contradiction /* impossible chain */ )
                    next
                      case Dec_Oracle
                      by step( contradiction /* cyclic */ )
                    next
                      case Encrypt_Attacker
                      by step( contradiction /* cyclic */ )
                    next
                      case Sender_encrypt
                      step( solve( (#vl.2, 0) ~~> (#vk.9, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.9, 0) ~~> (#vk.9, 0) ) )
                          case d_0_dec
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.9, 0) ~~> (#vk.9, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.10, 0) ~~> (#vk.9, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.10, 0) ~~> (#vk.9, 0) ) )
                            case d_0_verify
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    step( solve( !KU( $User ) @ #vk.11 ) )
                      case coerce
                      step( solve( !KD( $User ) ▶₀ #vk.10 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.8 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.2, ~ID.1 ) ▶₀ #vr.8 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( solve( (#vl.2, 0) ~~> (#vk.10, 0) ) )
                      next
                        case Encrypt_Attacker
                        by step( solve( (#vl.2, 0) ~~> (#vk.10, 0) ) )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.2, 0) ~~> (#vk.10, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.9, 0) ~~> (#vk.10, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.9, 0) ~~> (#vk.10, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.10, 0) ~~> (#vk.10, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.10, 0) ~~> (#vk.10, 0) ) )
                              case d_0_verify
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      step( solve( !KU( enc(<'MsterKey', 'KGC', ~n>, ~Masterskey.1)
                                   ) @ #vk.11 ) )
                        case Attacker_make_ciphertxt
                        step( solve( !KU( 'b' ) @ #vk.12 ) )
                          case coerce
                          step( solve( !KD( 'b' ) ▶₀ #vk.12 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.8 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.2, ~ID.1 ) ▶₀ #vr.8 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( solve( (#vl.3, 0) ~~> (#vk.12, 0) ) )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.12, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.12, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.9, 0) ~~> (#vk.12, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.9, 0) ~~> (#vk.12, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.10, 0) ~~> (#vk.12, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.10, 0) ~~> (#vk.12, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          MIRRORED
                        qed
                      next
                        case c_enc
                        by step( solve( !KU( ~Masterskey.1 ) @ #vk.15 ) )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case fresh
          step( solve( !KU( 'MsterKey' ) @ #vk.5 ) )
            case coerce
            step( solve( !KD( 'MsterKey' ) ▶₀ #vk.5 ) )
              case Attacker_Get_Masterskey
              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.2 ) )
                case Setup
                by step( contradiction /* impossible chain */ )
              qed
            next
              case Attacker_Get_Usersey
              step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.2 ) )
                case Create_Id
                by step( contradiction /* impossible chain */ )
              qed
            next
              case Attacker_make_ciphertxt
              by step( contradiction /* impossible chain */ )
            next
              case Dec_Oracle
              by step( contradiction /* cyclic */ )
            next
              case Encrypt_Attacker
              by step( contradiction /* cyclic */ )
            next
              case Sender_encrypt
              step( solve( (#vl, 0) ~~> (#vk.5, 0) ) )
                case d_0_fst
                step( solve( (#vr.3, 0) ~~> (#vk.5, 0) ) )
                  case d_0_dec
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk.5, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.4, 0) ~~> (#vk.5, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk.5, 0) ) )
                    case d_0_verify
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              qed
            next
              case Setup
              by step( contradiction /* impossible chain */ )
            qed
          next
            case pub
            step( solve( !KU( 'KGC' ) @ #vk.6 ) )
              case coerce
              step( solve( !KD( 'KGC' ) ▶₀ #vk.6 ) )
                case Attacker_Get_Masterskey
                step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.2 ) )
                  case Setup
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case Attacker_Get_Usersey
                step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.2 ) )
                  case Create_Id
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case Attacker_make_ciphertxt
                by step( contradiction /* impossible chain */ )
              next
                case Dec_Oracle
                by step( contradiction /* cyclic */ )
              next
                case Encrypt_Attacker
                by step( contradiction /* cyclic */ )
              next
                case Sender_encrypt
                step( solve( (#vl, 0) ~~> (#vk.6, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.3, 0) ~~> (#vk.6, 0) ) )
                    case d_0_dec
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.3, 0) ~~> (#vk.6, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.4, 0) ~~> (#vk.6, 0) ) )
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#vk.6, 0) ) )
                      case d_0_verify
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                qed
              next
                case Setup
                by step( contradiction /* impossible chain */ )
              qed
            next
              case pub
              step( solve( !KU( 'UserKey' ) @ #vk.8 ) )
                case coerce
                step( solve( !KD( 'UserKey' ) ▶₀ #vk.7 ) )
                  case Attacker_Get_Masterskey
                  step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.2 ) )
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Attacker_Get_Usersey
                  step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.2 ) )
                    case Create_Id
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Attacker_make_ciphertxt
                  by step( contradiction /* impossible chain */ )
                next
                  case Dec_Oracle
                  by step( contradiction /* cyclic */ )
                next
                  case Encrypt_Attacker
                  by step( contradiction /* cyclic */ )
                next
                  case Sender_encrypt
                  step( solve( (#vl, 0) ~~> (#vk.7, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.3, 0) ~~> (#vk.7, 0) ) )
                      case d_0_dec
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.3, 0) ~~> (#vk.7, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.4, 0) ~~> (#vk.7, 0) ) )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#vk.7, 0) ) )
                        case d_0_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Setup
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case pub
                step( solve( !KU( $User ) @ #vk.9 ) )
                  case coerce
                  step( solve( !KD( $User ) ▶₀ #vk.8 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.2 ) )
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_Get_Usersey
                    step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.2 ) )
                      case Create_Id
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_make_ciphertxt
                    by step( contradiction /* impossible chain */ )
                  next
                    case Dec_Oracle
                    by step( solve( (#vl, 0) ~~> (#vk.8, 0) ) )
                  next
                    case Encrypt_Attacker
                    by step( solve( (#vl, 0) ~~> (#vk.8, 0) ) )
                  next
                    case Sender_encrypt
                    step( solve( (#vl, 0) ~~> (#vk.8, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.3, 0) ~~> (#vk.8, 0) ) )
                        case d_0_dec
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.3, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.4, 0) ~~> (#vk.8, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.4, 0) ~~> (#vk.8, 0) ) )
                          case d_0_verify
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case pub
                  step( solve( !KU( enc(<'MsterKey', 'KGC', ~n>, ~Masterskey.1)
                               ) @ #vk.9 ) )
                    case Attacker_make_ciphertxt
                    MIRRORED
                  next
                    case c_enc
                    by step( solve( !KU( ~Masterskey.1 ) @ #vk.12 ) )
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Equality
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case Attacker_Get_Masterskey
      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr ) )
        case Setup
        step( solve( (#vl, 0) ~~> (#i, 1) ) )
          case Var_fresh_Masterskey
          step( solve( !KU( ~Masterskey ) @ #vk ) )
            case Attacker_Get_Masterskey
            MIRRORED
          qed
        qed
      qed
    next
      case Attacker_Get_Usersey
      step( solve( !UserID( Masterpkey, t, $User, ~ID ) ▶₀ #vr ) )
        case Create_Id
        step( solve( (#vl, 0) ~~> (#i, 1) ) )
          case KGCskey
          step( solve( !KU( KGCskey(~Masterskey, $User) ) @ #vk ) )
            case Attacker_Get_Usersey
            MIRRORED
          next
            case c_KGCskey
            step( solve( !KU( ~Masterskey ) @ #vk.1 ) )
              case Attacker_Get_Masterskey
              step( solve( !KU( $User ) @ #vk.2 ) )
                case coerce
                step( solve( !KD( $User ) ▶₀ #vk.2 ) )
                  case Attacker_Get_Masterskey
                  step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.4 ) )
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Attacker_Get_Usersey
                  step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.4 ) )
                    case Create_Id
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Attacker_make_ciphertxt
                  by step( contradiction /* impossible chain */ )
                next
                  case Dec_Oracle
                  by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                next
                  case Encrypt_Attacker
                  by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                next
                  case Sender_encrypt
                  step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                      case d_0_dec
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        case d_0_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Setup
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case pub
                MIRRORED
              qed
            qed
          qed
        qed
      qed
    next
      case Attacker_make_ciphertxt
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case enc
        step( solve( !KU( enc(<'MsterKey', 'KGC', ~n>, ~Masterskey) ) @ #vk ) )
          case Attacker_make_ciphertxt
          MIRRORED
        next
          case c_enc
          by step( solve( !KU( ~Masterskey ) @ #vk.3 ) )
        qed
      qed
    next
      case Dec_Oracle
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case dec
        step( solve( !UserID( Masterpkey, Userskey, 'b', ~ID ) ▶₁ #vr ) )
          case Create_Id
          by step( solve( St_Sender( Get_Masterpkey(~Masterskey.1),
                                     KGCskey(~Masterskey.1, 'b'), ~ID, ~nonce
                          ) ▶₂ #vr ) )
        qed
      qed
    next
      case Encrypt_Attacker
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case enc
        step( solve( !Make_Masterskey( ~Masterskey, 'KGC' ) ▶₀ #vr ) )
          case Setup
          step( solve( St_Oracle( m_ ) ▶₃ #vr ) )
            case Attacker_make_ciphertxt
            step( solve( !KU( ~m ) @ #vk.10 ) )
              case Attacker_Get_Masterskey
              step( solve( !KU( 'MsterKey' ) @ #vk.6 ) )
                case coerce
                step( solve( !KD( 'MsterKey' ) ▶₀ #vk.5 ) )
                  case Attacker_Get_Masterskey
                  step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.4 ) )
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Attacker_Get_Usersey
                  step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.4 ) )
                    case Create_Id
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Attacker_make_ciphertxt
                  by step( contradiction /* impossible chain */ )
                next
                  case Dec_Oracle
                  by step( contradiction /* cyclic */ )
                next
                  case Encrypt_Attacker
                  by step( contradiction /* cyclic */ )
                next
                  case Sender_encrypt
                  step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                      case d_0_dec
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                        case d_0_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Setup
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case pub
                step( solve( !KU( 'KGC' ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( 'KGC' ) ▶₀ #vk.6 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.4 ) )
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_Get_Usersey
                    step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.4 ) )
                      case Create_Id
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_make_ciphertxt
                    by step( contradiction /* impossible chain */ )
                  next
                    case Dec_Oracle
                    by step( contradiction /* cyclic */ )
                  next
                    case Encrypt_Attacker
                    by step( contradiction /* cyclic */ )
                  next
                    case Sender_encrypt
                    step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                        case d_0_dec
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.6, 0) ~~> (#vk.6, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.6, 0) ~~> (#vk.6, 0) ) )
                          case d_0_verify
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case pub
                  step( solve( !KU( 'UserKey' ) @ #vk.9 ) )
                    case coerce
                    step( solve( !KD( 'UserKey' ) ▶₀ #vk.7 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.4 ) )
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_Get_Usersey
                      step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.4 ) )
                        case Create_Id
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_make_ciphertxt
                      by step( contradiction /* impossible chain */ )
                    next
                      case Dec_Oracle
                      by step( contradiction /* cyclic */ )
                    next
                      case Encrypt_Attacker
                      by step( contradiction /* cyclic */ )
                    next
                      case Sender_encrypt
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.5, 0) ~~> (#vk.7, 0) ) )
                          case d_0_dec
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#vk.7, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.6, 0) ~~> (#vk.7, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.6, 0) ~~> (#vk.7, 0) ) )
                            case d_0_verify
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    step( solve( !KU( $User ) @ #vk.10 ) )
                      case coerce
                      step( solve( !KD( $User ) ▶₀ #vk.8 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.4 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.4 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                      next
                        case Encrypt_Attacker
                        by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.5, 0) ~~> (#vk.8, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.5, 0) ~~> (#vk.8, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.6, 0) ~~> (#vk.8, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.6, 0) ~~> (#vk.8, 0) ) )
                              case d_0_verify
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      step( solve( !KU( enc(<'MsterKey', 'KGC', 
                                             enc(<'MsterKey', 'KGC', ~n>, ~Masterskey)>,
                                            ~m)
                                   ) @ #vk.9 ) )
                        case Encrypt_Attacker
                        step( solve( !KU( enc(<'MsterKey', 'KGC', ~n>, ~Masterskey)
                                     ) @ #vk.10 ) )
                          case Attacker_make_ciphertxt
                          MIRRORED
                        next
                          case c_enc
                          by step( solve( !KU( ~Masterskey ) @ #vk.13 ) )
                        qed
                      next
                        case c_enc
                        step( solve( !KU( enc(<'MsterKey', 'KGC', ~n>, ~Masterskey)
                                     ) @ #vk.10 ) )
                          case Attacker_make_ciphertxt
                          MIRRORED
                        next
                          case c_enc
                          by step( solve( !KU( ~Masterskey ) @ #vk.13 ) )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Sender_encrypt
              step( solve( !KU( KGCskey(~Masterskey.1, 'b') ) @ #vk.11 ) )
                case Attacker_Get_Usersey
                step( solve( !KU( 'MsterKey' ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( 'MsterKey' ) ▶₀ #vk.6 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_Get_Usersey
                    step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.10 ) )
                      case Create_Id
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_make_ciphertxt
                    by step( contradiction /* impossible chain */ )
                  next
                    case Dec_Oracle
                    by step( contradiction /* cyclic */ )
                  next
                    case Encrypt_Attacker
                    by step( contradiction /* cyclic */ )
                  next
                    case Sender_encrypt
                    step( solve( (#vl.3, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.11, 0) ~~> (#vk.6, 0) ) )
                        case d_0_dec
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.11, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.12, 0) ~~> (#vk.6, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.12, 0) ~~> (#vk.6, 0) ) )
                          case d_0_verify
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case pub
                  step( solve( !KU( 'KGC' ) @ #vk.8 ) )
                    case coerce
                    step( solve( !KD( 'KGC' ) ▶₀ #vk.7 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_Get_Usersey
                      step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.10 ) )
                        case Create_Id
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_make_ciphertxt
                      by step( contradiction /* impossible chain */ )
                    next
                      case Dec_Oracle
                      by step( contradiction /* cyclic */ )
                    next
                      case Encrypt_Attacker
                      by step( contradiction /* cyclic */ )
                    next
                      case Sender_encrypt
                      step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.11, 0) ~~> (#vk.7, 0) ) )
                          case d_0_dec
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.11, 0) ~~> (#vk.7, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.12, 0) ~~> (#vk.7, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.12, 0) ~~> (#vk.7, 0) ) )
                            case d_0_verify
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    step( solve( !KU( 'UserKey' ) @ #vk.10 ) )
                      case coerce
                      step( solve( !KD( 'UserKey' ) ▶₀ #vk.8 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.10 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( contradiction /* cyclic */ )
                      next
                        case Encrypt_Attacker
                        by step( contradiction /* cyclic */ )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.12, 0) ~~> (#vk.8, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.12, 0) ~~> (#vk.8, 0) ) )
                              case d_0_verify
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      step( solve( !KU( $User ) @ #vk.11 ) )
                        case coerce
                        step( solve( !KD( $User ) ▶₀ #vk.9 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.10 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.11, 0) ~~> (#vk.9, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.11, 0) ~~> (#vk.9, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.12, 0) ~~> (#vk.9, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.12, 0) ~~> (#vk.9, 0) ) )
                                case d_0_verify
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        step( solve( !KU( enc(<'MsterKey', 'KGC', 
                                               enc(<'MsterKey', 'KGC', ~n>, ~Masterskey)>,
                                              ~Masterskey.1)
                                     ) @ #vk.10 ) )
                          case Encrypt_Attacker
                          step( solve( !KU( enc(<'MsterKey', 'KGC', ~n>, ~Masterskey)
                                       ) @ #vk.11 ) )
                            case Attacker_make_ciphertxt
                            MIRRORED
                          next
                            case c_enc
                            by step( solve( !KU( ~Masterskey ) @ #vk.14 ) )
                          qed
                        next
                          case c_enc
                          step( solve( !KU( ~Masterskey.1 ) @ #vk.12 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !KU( enc(<'MsterKey', 'KGC', ~n>, ~Masterskey)
                                         ) @ #vk.12 ) )
                              case Attacker_make_ciphertxt
                              MIRRORED
                            next
                              case c_enc
                              by step( solve( !KU( ~Masterskey ) @ #vk.15 ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_KGCskey
                step( solve( !KU( ~Masterskey.1 ) @ #vk.12 ) )
                  case Attacker_Get_Masterskey
                  step( solve( !KU( 'MsterKey' ) @ #vk.8 ) )
                    case coerce
                    step( solve( !KD( 'MsterKey' ) ▶₀ #vk.7 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_Get_Usersey
                      step( solve( !UserID( Masterpkey, t, $User.2, ~ID.1 ) ▶₀ #vr.9 ) )
                        case Create_Id
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_make_ciphertxt
                      by step( contradiction /* impossible chain */ )
                    next
                      case Dec_Oracle
                      by step( contradiction /* cyclic */ )
                    next
                      case Encrypt_Attacker
                      by step( contradiction /* cyclic */ )
                    next
                      case Sender_encrypt
                      step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.10, 0) ~~> (#vk.7, 0) ) )
                          case d_0_dec
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.10, 0) ~~> (#vk.7, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.11, 0) ~~> (#vk.7, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.11, 0) ~~> (#vk.7, 0) ) )
                            case d_0_verify
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    step( solve( !KU( 'KGC' ) @ #vk.9 ) )
                      case coerce
                      step( solve( !KD( 'KGC' ) ▶₀ #vk.8 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.2, ~ID.1 ) ▶₀ #vr.9 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( contradiction /* cyclic */ )
                      next
                        case Encrypt_Attacker
                        by step( contradiction /* cyclic */ )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.10, 0) ~~> (#vk.8, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.10, 0) ~~> (#vk.8, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                              case d_0_verify
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      step( solve( !KU( 'UserKey' ) @ #vk.11 ) )
                        case coerce
                        step( solve( !KD( 'UserKey' ) ▶₀ #vk.9 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.2, ~ID.1 ) ▶₀ #vr.9 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( contradiction /* cyclic */ )
                        next
                          case Encrypt_Attacker
                          by step( contradiction /* cyclic */ )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.10, 0) ~~> (#vk.9, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.10, 0) ~~> (#vk.9, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.11, 0) ~~> (#vk.9, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.11, 0) ~~> (#vk.9, 0) ) )
                                case d_0_verify
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        step( solve( !KU( $User ) @ #vk.12 ) )
                          case coerce
                          step( solve( !KD( $User ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.2, ~ID.1 ) ▶₀ #vr.9 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.10, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.11, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( enc(<'MsterKey', 'KGC', 
                                                 enc(<'MsterKey', 'KGC', ~n>, ~Masterskey)>,
                                                ~Masterskey.1)
                                       ) @ #vk.11 ) )
                            case Encrypt_Attacker
                            step( solve( !KU( enc(<'MsterKey', 'KGC', ~n>, ~Masterskey)
                                         ) @ #vk.12 ) )
                              case Attacker_make_ciphertxt
                              step( solve( !KU( 'b' ) @ #vk.13 ) )
                                case coerce
                                step( solve( !KD( 'b' ) ▶₀ #vk.13 ) )
                                  case Attacker_Get_Masterskey
                                  step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                                    case Setup
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case Attacker_Get_Usersey
                                  step( solve( !UserID( Masterpkey, t, $User.2, ~ID.1 ) ▶₀ #vr.9 ) )
                                    case Create_Id
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case Attacker_make_ciphertxt
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case Dec_Oracle
                                  by step( solve( (#vl.4, 0) ~~> (#vk.13, 0) ) )
                                next
                                  case Encrypt_Attacker
                                  by step( solve( (#vl.4, 0) ~~> (#vk.13, 0) ) )
                                next
                                  case Sender_encrypt
                                  step( solve( (#vl.4, 0) ~~> (#vk.13, 0) ) )
                                    case d_0_fst
                                    step( solve( (#vr.10, 0) ~~> (#vk.13, 0) ) )
                                      case d_0_dec
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.10, 0) ~~> (#vk.13, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.11, 0) ~~> (#vk.13, 0) ) )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.11, 0) ~~> (#vk.13, 0) ) )
                                        case d_0_verify
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                next
                                  case Setup
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case pub
                                MIRRORED
                              qed
                            next
                              case c_enc
                              by step( solve( !KU( ~Masterskey ) @ #vk.16 ) )
                            qed
                          next
                            case c_enc
                            step( solve( !KU( enc(<'MsterKey', 'KGC', ~n>, ~Masterskey)
                                         ) @ #vk.12 ) )
                              case Attacker_make_ciphertxt
                              step( solve( !KU( 'b' ) @ #vk.13 ) )
                                case coerce
                                step( solve( !KD( 'b' ) ▶₀ #vk.13 ) )
                                  case Attacker_Get_Masterskey
                                  step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                                    case Setup
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case Attacker_Get_Usersey
                                  step( solve( !UserID( Masterpkey, t, $User.2, ~ID.1 ) ▶₀ #vr.9 ) )
                                    case Create_Id
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case Attacker_make_ciphertxt
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case Dec_Oracle
                                  by step( solve( (#vl.4, 0) ~~> (#vk.13, 0) ) )
                                next
                                  case Encrypt_Attacker
                                  by step( solve( (#vl.4, 0) ~~> (#vk.13, 0) ) )
                                next
                                  case Sender_encrypt
                                  step( solve( (#vl.4, 0) ~~> (#vk.13, 0) ) )
                                    case d_0_fst
                                    step( solve( (#vr.10, 0) ~~> (#vk.13, 0) ) )
                                      case d_0_dec
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.10, 0) ~~> (#vk.13, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.11, 0) ~~> (#vk.13, 0) ) )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.11, 0) ~~> (#vk.13, 0) ) )
                                        case d_0_verify
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                next
                                  case Setup
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case pub
                                MIRRORED
                              qed
                            next
                              case c_enc
                              by step( solve( !KU( ~Masterskey ) @ #vk.16 ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case fresh
              step( solve( !KU( 'MsterKey' ) @ #vk.6 ) )
                case coerce
                step( solve( !KD( 'MsterKey' ) ▶₀ #vk.5 ) )
                  case Attacker_Get_Masterskey
                  step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.3 ) )
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Attacker_Get_Usersey
                  step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.3 ) )
                    case Create_Id
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Attacker_make_ciphertxt
                  by step( contradiction /* impossible chain */ )
                next
                  case Dec_Oracle
                  by step( contradiction /* cyclic */ )
                next
                  case Encrypt_Attacker
                  by step( contradiction /* cyclic */ )
                next
                  case Sender_encrypt
                  step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.4, 0) ~~> (#vk.5, 0) ) )
                      case d_0_dec
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#vk.5, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                    next
                      case d_0_snd
                      step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        case d_0_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Setup
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case pub
                step( solve( !KU( 'KGC' ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( 'KGC' ) ▶₀ #vk.6 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.3 ) )
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_Get_Usersey
                    step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.3 ) )
                      case Create_Id
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_make_ciphertxt
                    by step( contradiction /* impossible chain */ )
                  next
                    case Dec_Oracle
                    by step( contradiction /* cyclic */ )
                  next
                    case Encrypt_Attacker
                    by step( contradiction /* cyclic */ )
                  next
                    case Sender_encrypt
                    step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.4, 0) ~~> (#vk.6, 0) ) )
                        case d_0_dec
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                          case d_0_verify
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case pub
                  step( solve( !KU( 'UserKey' ) @ #vk.9 ) )
                    case coerce
                    step( solve( !KD( 'UserKey' ) ▶₀ #vk.7 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.3 ) )
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_Get_Usersey
                      step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.3 ) )
                        case Create_Id
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_make_ciphertxt
                      by step( contradiction /* impossible chain */ )
                    next
                      case Dec_Oracle
                      by step( contradiction /* cyclic */ )
                    next
                      case Encrypt_Attacker
                      by step( contradiction /* cyclic */ )
                    next
                      case Sender_encrypt
                      step( solve( (#vl.1, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.4, 0) ~~> (#vk.7, 0) ) )
                          case d_0_dec
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.4, 0) ~~> (#vk.7, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.5, 0) ~~> (#vk.7, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.5, 0) ~~> (#vk.7, 0) ) )
                            case d_0_verify
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    step( solve( !KU( $User ) @ #vk.10 ) )
                      case coerce
                      step( solve( !KD( $User ) ▶₀ #vk.8 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.3 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.3 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( solve( (#vl.1, 0) ~~> (#vk.8, 0) ) )
                      next
                        case Encrypt_Attacker
                        by step( solve( (#vl.1, 0) ~~> (#vk.8, 0) ) )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.1, 0) ~~> (#vk.8, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.4, 0) ~~> (#vk.8, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.4, 0) ~~> (#vk.8, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.5, 0) ~~> (#vk.8, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.5, 0) ~~> (#vk.8, 0) ) )
                              case d_0_verify
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      step( solve( !KU( enc(<'MsterKey', 'KGC', 
                                             enc(<'MsterKey', 'KGC', ~n>, ~Masterskey)>,
                                            ~Masterskey.1)
                                   ) @ #vk.9 ) )
                        case Encrypt_Attacker
                        step( solve( !KU( enc(<'MsterKey', 'KGC', ~n>, ~Masterskey)
                                     ) @ #vk.10 ) )
                          case Attacker_make_ciphertxt
                          MIRRORED
                        next
                          case c_enc
                          by step( solve( !KU( ~Masterskey ) @ #vk.13 ) )
                        qed
                      next
                        case c_enc
                        step( solve( !KU( ~Masterskey.1 ) @ #vk.11 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !KU( enc(<'MsterKey', 'KGC', ~n>, ~Masterskey)
                                       ) @ #vk.11 ) )
                            case Attacker_make_ciphertxt
                            MIRRORED
                          next
                            case c_enc
                            by step( solve( !KU( ~Masterskey ) @ #vk.14 ) )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Sender_encrypt
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_fst
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case d_0_dec
          step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
            case d_0_fst
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case Var_fresh_nonce
              step( solve( !UserID( Get_Masterpkey(Masterskey), Userskey, 'a', ~ID
                           ) ▶₂ #vr ) )
                case Create_Id
                step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.1 ) )
                  case Attacker_Get_Usersey
                  step( solve( !KU( ~nonce ) @ #vk.1 ) )
                    case Sender_encrypt
                    MIRRORED
                  qed
                next
                  case c_KGCskey
                  step( solve( !KU( ~Masterskey ) @ #vk.2 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !KU( ~nonce ) @ #vk.2 ) )
                      case Sender_encrypt
                      step( solve( !KU( 'b' ) @ #vk.3 ) )
                        case coerce
                        step( solve( !KD( 'b' ) ▶₀ #vk.3 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.10 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.11, 0) ~~> (#vk.3, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.11, 0) ~~> (#vk.3, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.12, 0) ~~> (#vk.3, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.12, 0) ~~> (#vk.3, 0) ) )
                                case d_0_verify
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        MIRRORED
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case Const_pub_a
              step( solve( !UserID( Get_Masterpkey(Masterskey), Userskey, 'a', ~ID
                           ) ▶₂ #vr ) )
                case Create_Id
                step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.1 ) )
                  case Attacker_Get_Usersey
                  step( solve( !KU( 'a' ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( 'a' ) ▶₀ #vk.1 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.8 ) )
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_Get_Usersey
                      step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.8 ) )
                        case Create_Id
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_make_ciphertxt
                      by step( contradiction /* impossible chain */ )
                    next
                      case Dec_Oracle
                      by step( contradiction /* cyclic */ )
                    next
                      case Encrypt_Attacker
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case Sender_encrypt
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.9, 0) ~~> (#vk.1, 0) ) )
                          case d_0_dec
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.9, 0) ~~> (#vk.1, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.10, 0) ~~> (#vk.1, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.10, 0) ~~> (#vk.1, 0) ) )
                            case d_0_verify
                            by step( contradiction /* cyclic */ )
                          qed
                        qed
                      qed
                    next
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                next
                  case c_KGCskey
                  step( solve( !KU( ~Masterskey ) @ #vk.2 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !KU( 'a' ) @ #vk.2 ) )
                      case coerce
                      step( solve( !KD( 'a' ) ▶₀ #vk.2 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.7 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.7 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( contradiction /* cyclic */ )
                      next
                        case Encrypt_Attacker
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.8, 0) ~~> (#vk.2, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk.2, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk.2, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk.2, 0) ) )
                              case d_0_verify
                              by step( contradiction /* cyclic */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      step( solve( !KU( 'b' ) @ #vk.3 ) )
                        case coerce
                        step( solve( !KD( 'b' ) ▶₀ #vk.3 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.7 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.7 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.8, 0) ~~> (#vk.3, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.8, 0) ~~> (#vk.3, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.9, 0) ~~> (#vk.3, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.9, 0) ~~> (#vk.3, 0) ) )
                                case d_0_verify
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        MIRRORED
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case pair
            step( solve( !UserID( Get_Masterpkey(Masterskey), Userskey, 'a', ~ID
                         ) ▶₂ #vr ) )
              case Create_Id
              step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.1 ) )
                case Attacker_Get_Usersey
                step( solve( !KU( ~nonce ) @ #vk.2 ) )
                  case Sender_encrypt
                  step( solve( !KU( 'a' ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( 'a' ) ▶₀ #vk.3 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_Get_Usersey
                      step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.10 ) )
                        case Create_Id
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_make_ciphertxt
                      by step( contradiction /* impossible chain */ )
                    next
                      case Dec_Oracle
                      by step( contradiction /* cyclic */ )
                    next
                      case Encrypt_Attacker
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case Sender_encrypt
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.11, 0) ~~> (#vk.3, 0) ) )
                          case d_0_dec
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.11, 0) ~~> (#vk.3, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.12, 0) ~~> (#vk.3, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.12, 0) ~~> (#vk.3, 0) ) )
                            case d_0_verify
                            by step( contradiction /* cyclic */ )
                          qed
                        qed
                      qed
                    next
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                qed
              next
                case c_KGCskey
                step( solve( !KU( ~Masterskey ) @ #vk.4 ) )
                  case Attacker_Get_Masterskey
                  step( solve( !KU( ~nonce ) @ #vk.3 ) )
                    case Sender_encrypt
                    step( solve( !KU( 'a' ) @ #vk.4 ) )
                      case coerce
                      step( solve( !KD( 'a' ) ▶₀ #vk.4 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.9 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( contradiction /* cyclic */ )
                      next
                        case Encrypt_Attacker
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.10, 0) ~~> (#vk.4, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.10, 0) ~~> (#vk.4, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.11, 0) ~~> (#vk.4, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.11, 0) ~~> (#vk.4, 0) ) )
                              case d_0_verify
                              by step( contradiction /* cyclic */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      step( solve( !KU( 'b' ) @ #vk.5 ) )
                        case coerce
                        step( solve( !KD( 'b' ) ▶₀ #vk.5 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.9 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.10, 0) ~~> (#vk.5, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.10, 0) ~~> (#vk.5, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.11, 0) ~~> (#vk.5, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.11, 0) ~~> (#vk.5, 0) ) )
                                case d_0_verify
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        MIRRORED
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case enc
          step( solve( !UserID( Masterpkey, Userskey, 'a', ~ID ) ▶₂ #vr ) )
            case Create_Id
            step( solve( !KU( enc(<~nonce, 'a'>,
                                  KGCpkey(Get_Masterpkey(~Masterskey), 'b'))
                         ) @ #vk ) )
              case Sender_encrypt
              MIRRORED
            next
              case c_enc
              step( solve( !KU( ~nonce ) @ #vk.3 ) )
                case Sender_encrypt
                step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.5 ) )
                  case Attacker_Get_Usersey
                  step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.4 ) )
                    case Sender_encrypt
                    step( solve( !KU( 'a' ) @ #vk.5 ) )
                      case coerce
                      step( solve( !KD( 'a' ) ▶₀ #vk.5 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.13 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.2, ~ID.3 ) ▶₀ #vr.13 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( contradiction /* cyclic */ )
                      next
                        case Encrypt_Attacker
                        by step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.14, 0) ~~> (#vk.5, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.14, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.15, 0) ~~> (#vk.5, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.15, 0) ~~> (#vk.5, 0) ) )
                              case d_0_verify
                              by step( contradiction /* cyclic */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  next
                    case c_KGCpkey
                    step( solve( !KU( 'a' ) @ #vk.5 ) )
                      case coerce
                      step( solve( !KD( 'a' ) ▶₀ #vk.5 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.9 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( contradiction /* cyclic */ )
                      next
                        case Encrypt_Attacker
                        by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.10, 0) ~~> (#vk.5, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.10, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.11, 0) ~~> (#vk.5, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.11, 0) ~~> (#vk.5, 0) ) )
                              case d_0_verify
                              by step( contradiction /* cyclic */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.6 ) )
                        case Setup
                        step( solve( !KU( 'b' ) @ #vk.7 ) )
                          case coerce
                          step( solve( !KD( 'b' ) ▶₀ #vk.7 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.10 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.11, 0) ~~> (#vk.7, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.11, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.12, 0) ~~> (#vk.7, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.12, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          MIRRORED
                        qed
                      next
                        case c_Get_Masterpkey
                        step( solve( !KU( ~Masterskey ) @ #vk.8 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !KU( 'b' ) @ #vk.8 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.8 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.10 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.12, 0) ~~> (#vk.8, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk.8, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case c_KGCskey
                  step( solve( !KU( ~Masterskey ) @ #vk.6 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.5 ) )
                      case Sender_encrypt
                      step( solve( !KU( 'a' ) @ #vk.6 ) )
                        case coerce
                        step( solve( !KD( 'a' ) ▶₀ #vk.6 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.12 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.12 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( contradiction /* cyclic */ )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.3, 0) ~~> (#vk.6, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.3, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.13, 0) ~~> (#vk.6, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.13, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.14, 0) ~~> (#vk.6, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.14, 0) ~~> (#vk.6, 0) ) )
                                case d_0_verify
                                by step( contradiction /* cyclic */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        step( solve( !KU( 'b' ) @ #vk.7 ) )
                          case coerce
                          step( solve( !KD( 'b' ) ▶₀ #vk.7 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.12 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.12 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.13, 0) ~~> (#vk.7, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.13, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.14, 0) ~~> (#vk.7, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.14, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          MIRRORED
                        qed
                      qed
                    next
                      case c_KGCpkey
                      step( solve( !KU( 'a' ) @ #vk.6 ) )
                        case coerce
                        step( solve( !KD( 'a' ) ▶₀ #vk.6 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.8 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.8 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( contradiction /* cyclic */ )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.9, 0) ~~> (#vk.6, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.10, 0) ~~> (#vk.6, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk.6, 0) ) )
                                case d_0_verify
                                by step( contradiction /* cyclic */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        step( solve( !KU( 'b' ) @ #vk.7 ) )
                          case coerce
                          step( solve( !KD( 'b' ) ▶₀ #vk.7 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.8 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.8 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.9, 0) ~~> (#vk.7, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.9, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.10, 0) ~~> (#vk.7, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.10, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.8 ) )
                            case Setup
                            MIRRORED
                          next
                            case c_Get_Masterpkey
                            MIRRORED
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case d_0_fst
          step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
            case KGCpkey
            step( solve( !UserID( Masterpkey, Userskey, 'a', ~ID ) ▶₂ #vr ) )
              case Create_Id
              step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk ) )
                case Sender_encrypt
                MIRRORED
              next
                case c_KGCpkey
                step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.1 ) )
                  case Setup
                  step( solve( !KU( 'b' ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( 'b' ) ▶₀ #vk.2 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.6 ) )
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_Get_Usersey
                      step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.6 ) )
                        case Create_Id
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_make_ciphertxt
                      by step( contradiction /* impossible chain */ )
                    next
                      case Dec_Oracle
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case Encrypt_Attacker
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case Sender_encrypt
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.7, 0) ~~> (#vk.2, 0) ) )
                          case d_0_dec
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk.2, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk.2, 0) ) )
                            case d_0_verify
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                next
                  case c_Get_Masterpkey
                  step( solve( !KU( ~Masterskey ) @ #vk.3 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !KU( 'b' ) @ #vk.3 ) )
                      case coerce
                      step( solve( !KD( 'b' ) ▶₀ #vk.3 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.6 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.6 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      next
                        case Encrypt_Attacker
                        by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.8, 0) ~~> (#vk.3, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.8, 0) ~~> (#vk.3, 0) ) )
                              case d_0_verify
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case d_0_snd
          step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
            case d_0_verify
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case true
              step( solve( !UserID( Masterpkey, KGCskey(Masterskey, User), 'a', ~ID
                           ) ▶₂ #vr ) )
                case Create_Id
                step( solve( !KU( ~nonce ) @ #vk.3 ) )
                  case Sender_encrypt
                  step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'a') ) @ #vk.3 ) )
                    case c_KGCpkey
                    step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.5 ) )
                      case Attacker_Get_Usersey
                      step( solve( !KU( 'a' ) @ #vk.5 ) )
                        case coerce
                        step( solve( !KD( 'a' ) ▶₀ #vk.4 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.11 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( contradiction /* cyclic */ )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.12, 0) ~~> (#vk.4, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.12, 0) ~~> (#vk.4, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.13, 0) ~~> (#vk.4, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.13, 0) ~~> (#vk.4, 0) ) )
                                case d_0_verify
                                by step( contradiction /* cyclic */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        step( solve( !KU( true ) @ #vk.5 ) )
                          case c_true
                          step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.6 ) )
                            case Setup
                            MIRRORED
                          next
                            case c_Get_Masterpkey
                            step( solve( !KU( ~Masterskey ) @ #vk.7 ) )
                              case Attacker_Get_Masterskey
                              MIRRORED
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( true ) ▶₀ #vk.5 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.11 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.12, 0) ~~> (#vk.5, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.12, 0) ~~> (#vk.5, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.13, 0) ~~> (#vk.5, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.13, 0) ~~> (#vk.5, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case c_KGCskey
                      step( solve( !KU( ~Masterskey ) @ #vk.7 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !KU( 'a' ) @ #vk.6 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.5 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.10 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.11, 0) ~~> (#vk.5, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.11, 0) ~~> (#vk.5, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.12, 0) ~~> (#vk.5, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.12, 0) ~~> (#vk.5, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( true ) @ #vk.6 ) )
                            case c_true
                            step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.7 ) )
                              case Setup
                              step( solve( !KU( 'b' ) @ #vk.8 ) )
                                case coerce
                                step( solve( !KD( 'b' ) ▶₀ #vk.8 ) )
                                  case Attacker_Get_Masterskey
                                  step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                                    case Setup
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case Attacker_Get_Usersey
                                  step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.11 ) )
                                    case Create_Id
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case Attacker_make_ciphertxt
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case Dec_Oracle
                                  by step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                                next
                                  case Encrypt_Attacker
                                  by step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                                next
                                  case Sender_encrypt
                                  step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                                    case d_0_fst
                                    step( solve( (#vr.12, 0) ~~> (#vk.8, 0) ) )
                                      case d_0_dec
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.12, 0) ~~> (#vk.8, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.13, 0) ~~> (#vk.8, 0) ) )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.13, 0) ~~> (#vk.8, 0) ) )
                                        case d_0_verify
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                next
                                  case Setup
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case pub
                                MIRRORED
                              qed
                            next
                              case c_Get_Masterpkey
                              step( solve( !KU( 'b' ) @ #vk.8 ) )
                                case coerce
                                step( solve( !KD( 'b' ) ▶₀ #vk.8 ) )
                                  case Attacker_Get_Masterskey
                                  step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                                    case Setup
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case Attacker_Get_Usersey
                                  step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.10 ) )
                                    case Create_Id
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case Attacker_make_ciphertxt
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case Dec_Oracle
                                  by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                                next
                                  case Encrypt_Attacker
                                  by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                                next
                                  case Sender_encrypt
                                  step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                                    case d_0_fst
                                    step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                                      case d_0_dec
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.12, 0) ~~> (#vk.8, 0) ) )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.12, 0) ~~> (#vk.8, 0) ) )
                                        case d_0_verify
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                next
                                  case Setup
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case pub
                                MIRRORED
                              qed
                            qed
                          next
                            case coerce
                            step( solve( !KD( true ) ▶₀ #vk.6 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.10 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.11, 0) ~~> (#vk.6, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk.6, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.12, 0) ~~> (#vk.6, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk.6, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case sign
            step( solve( !UserID( Masterpkey, Userskey, 'a', ~ID ) ▶₂ #vr ) )
              case Create_Id
              step( solve( !KU( sign(<~nonce, 'a'>, KGCskey(~Masterskey, 'a'))
                           ) @ #vk ) )
                case Sender_encrypt
                MIRRORED
              next
                case c_sign
                step( solve( !KU( ~nonce ) @ #vk.3 ) )
                  case Sender_encrypt
                  step( solve( !KU( KGCskey(~Masterskey, 'a') ) @ #vk.3 ) )
                    case Attacker_Get_Usersey
                    step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.5 ) )
                      case Attacker_Get_Usersey
                      step( solve( !KU( 'a' ) @ #vk.5 ) )
                        case coerce
                        step( solve( !KD( 'a' ) ▶₀ #vk.5 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.12 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.1, ~ID.3 ) ▶₀ #vr.12 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( contradiction /* cyclic */ )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.13, 0) ~~> (#vk.5, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.13, 0) ~~> (#vk.5, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.14, 0) ~~> (#vk.5, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.14, 0) ~~> (#vk.5, 0) ) )
                                case d_0_verify
                                by step( contradiction /* cyclic */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        MIRRORED
                      qed
                    next
                      case c_KGCskey
                      step( solve( !KU( ~Masterskey ) @ #vk.6 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !KU( 'a' ) @ #vk.6 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.6 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.11 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.6, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.12, 0) ~~> (#vk.6, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.12, 0) ~~> (#vk.6, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.13, 0) ~~> (#vk.6, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.13, 0) ~~> (#vk.6, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( 'b' ) @ #vk.7 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.7 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.11 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.12, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.12, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.13, 0) ~~> (#vk.7, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.13, 0) ~~> (#vk.7, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_KGCskey
                    step( solve( !KU( ~Masterskey ) @ #vk.6 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.6 ) )
                        case Attacker_Get_Usersey
                        step( solve( !KU( 'a' ) @ #vk.6 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.6 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.11 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.6, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.12, 0) ~~> (#vk.6, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.12, 0) ~~> (#vk.6, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.13, 0) ~~> (#vk.6, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.13, 0) ~~> (#vk.6, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          MIRRORED
                        qed
                      next
                        case c_KGCskey
                        step( solve( !KU( 'a' ) @ #vk.6 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.6 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.9 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.10, 0) ~~> (#vk.6, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk.6, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.11, 0) ~~> (#vk.6, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk.6, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( 'b' ) @ #vk.7 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.7 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.9 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.10, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.10, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.11, 0) ~~> (#vk.7, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.11, 0) ~~> (#vk.7, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case pair
          step( solve( !UserID( Masterpkey, Userskey, 'a', ~ID ) ▶₂ #vr ) )
            case Create_Id
            step( solve( !KU( sign(<~nonce, 'a'>, KGCskey(~Masterskey, 'a'))
                         ) @ #vk.2 ) )
              case Sender_encrypt
              step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.2 ) )
                case Sender_encrypt
                MIRRORED
              next
                case c_KGCpkey
                step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.3 ) )
                  case Setup
                  step( solve( !KU( 'b' ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( 'b' ) ▶₀ #vk.4 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.7 ) )
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_Get_Usersey
                      step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.7 ) )
                        case Create_Id
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_make_ciphertxt
                      by step( contradiction /* impossible chain */ )
                    next
                      case Dec_Oracle
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case Encrypt_Attacker
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case Sender_encrypt
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                          case d_0_dec
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.9, 0) ~~> (#vk.4, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.9, 0) ~~> (#vk.4, 0) ) )
                            case d_0_verify
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                next
                  case c_Get_Masterpkey
                  step( solve( !KU( ~Masterskey ) @ #vk.5 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !KU( 'b' ) @ #vk.5 ) )
                      case coerce
                      step( solve( !KD( 'b' ) ▶₀ #vk.5 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.7 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.7 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      next
                        case Encrypt_Attacker
                        by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk.5, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk.5, 0) ) )
                              case d_0_verify
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                qed
              qed
            next
              case c_sign
              step( solve( !KU( ~nonce ) @ #vk.5 ) )
                case Sender_encrypt
                step( solve( !KU( KGCskey(~Masterskey, 'a') ) @ #vk.5 ) )
                  case Attacker_Get_Usersey
                  step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.7 ) )
                    case Attacker_Get_Usersey
                    step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.6 ) )
                      case Sender_encrypt
                      step( solve( !KU( 'a' ) @ #vk.7 ) )
                        case coerce
                        step( solve( !KD( 'a' ) ▶₀ #vk.7 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.15 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.2, ~ID.4 ) ▶₀ #vr.15 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( contradiction /* cyclic */ )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.16, 0) ~~> (#vk.7, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.16, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.17, 0) ~~> (#vk.7, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.17, 0) ~~> (#vk.7, 0) ) )
                                case d_0_verify
                                by step( contradiction /* cyclic */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        MIRRORED
                      qed
                    next
                      case c_KGCpkey
                      step( solve( !KU( 'a' ) @ #vk.7 ) )
                        case coerce
                        step( solve( !KD( 'a' ) ▶₀ #vk.7 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.1, ~ID.3 ) ▶₀ #vr.11 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( contradiction /* cyclic */ )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.12, 0) ~~> (#vk.7, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.12, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.13, 0) ~~> (#vk.7, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.13, 0) ~~> (#vk.7, 0) ) )
                                case d_0_verify
                                by step( contradiction /* cyclic */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.8 ) )
                          case Setup
                          step( solve( !KU( 'b' ) @ #vk.9 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.9 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.12 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.3 ) ▶₀ #vr.12 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.13, 0) ~~> (#vk.9, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.13, 0) ~~> (#vk.9, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.14, 0) ~~> (#vk.9, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.14, 0) ~~> (#vk.9, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        next
                          case c_Get_Masterpkey
                          step( solve( !KU( ~Masterskey ) @ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !KU( 'b' ) @ #vk.10 ) )
                              case coerce
                              step( solve( !KD( 'b' ) ▶₀ #vk.10 ) )
                                case Attacker_Get_Masterskey
                                step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.12 ) )
                                  case Setup
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_Get_Usersey
                                step( solve( !UserID( Masterpkey, t, $User.1, ~ID.3 ) ▶₀ #vr.12 ) )
                                  case Create_Id
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_make_ciphertxt
                                by step( contradiction /* impossible chain */ )
                              next
                                case Dec_Oracle
                                by step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                              next
                                case Encrypt_Attacker
                                by step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                              next
                                case Sender_encrypt
                                step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_fst
                                  step( solve( (#vr.13, 0) ~~> (#vk.10, 0) ) )
                                    case d_0_dec
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( (#vr.13, 0) ~~> (#vk.10, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.14, 0) ~~> (#vk.10, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.14, 0) ~~> (#vk.10, 0) ) )
                                      case d_0_verify
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              next
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case pub
                              MIRRORED
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_KGCskey
                    step( solve( !KU( ~Masterskey ) @ #vk.8 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.7 ) )
                        case Sender_encrypt
                        step( solve( !KU( 'a' ) @ #vk.8 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.8 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.14 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.2, ~ID.3 ) ▶₀ #vr.14 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.15, 0) ~~> (#vk.8, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.15, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.16, 0) ~~> (#vk.8, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.16, 0) ~~> (#vk.8, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( 'b' ) @ #vk.9 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.9 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.14 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.2, ~ID.3 ) ▶₀ #vr.14 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.15, 0) ~~> (#vk.9, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.15, 0) ~~> (#vk.9, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.16, 0) ~~> (#vk.9, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.16, 0) ~~> (#vk.9, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        qed
                      next
                        case c_KGCpkey
                        step( solve( !KU( 'a' ) @ #vk.8 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.8 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.10 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.12, 0) ~~> (#vk.8, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.12, 0) ~~> (#vk.8, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( 'b' ) @ #vk.9 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.9 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.10 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.11, 0) ~~> (#vk.9, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk.9, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.12, 0) ~~> (#vk.9, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk.9, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.10 ) )
                              case Setup
                              MIRRORED
                            next
                              case c_Get_Masterpkey
                              MIRRORED
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case c_KGCskey
                  step( solve( !KU( ~Masterskey ) @ #vk.8 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.8 ) )
                      case Attacker_Get_Usersey
                      step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.7 ) )
                        case Sender_encrypt
                        step( solve( !KU( 'a' ) @ #vk.8 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.8 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.14 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.2, ~ID.3 ) ▶₀ #vr.14 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.15, 0) ~~> (#vk.8, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.15, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.16, 0) ~~> (#vk.8, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.16, 0) ~~> (#vk.8, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          MIRRORED
                        qed
                      next
                        case c_KGCpkey
                        step( solve( !KU( 'a' ) @ #vk.8 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.8 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.10 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.12, 0) ~~> (#vk.8, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.12, 0) ~~> (#vk.8, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.9 ) )
                            case Setup
                            step( solve( !KU( 'b' ) @ #vk.10 ) )
                              case coerce
                              step( solve( !KD( 'b' ) ▶₀ #vk.10 ) )
                                case Attacker_Get_Masterskey
                                step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                                  case Setup
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_Get_Usersey
                                step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.11 ) )
                                  case Create_Id
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_make_ciphertxt
                                by step( contradiction /* impossible chain */ )
                              next
                                case Dec_Oracle
                                by step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                              next
                                case Encrypt_Attacker
                                by step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                              next
                                case Sender_encrypt
                                step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_fst
                                  step( solve( (#vr.12, 0) ~~> (#vk.10, 0) ) )
                                    case d_0_dec
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk.10, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.13, 0) ~~> (#vk.10, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk.10, 0) ) )
                                      case d_0_verify
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              next
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case pub
                              MIRRORED
                            qed
                          next
                            case c_Get_Masterpkey
                            step( solve( !KU( 'b' ) @ #vk.10 ) )
                              case coerce
                              step( solve( !KD( 'b' ) ▶₀ #vk.10 ) )
                                case Attacker_Get_Masterskey
                                step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                                  case Setup
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_Get_Usersey
                                step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.10 ) )
                                  case Create_Id
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_make_ciphertxt
                                by step( contradiction /* impossible chain */ )
                              next
                                case Dec_Oracle
                                by step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                              next
                                case Encrypt_Attacker
                                by step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                              next
                                case Sender_encrypt
                                step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_fst
                                  step( solve( (#vr.11, 0) ~~> (#vk.10, 0) ) )
                                    case d_0_dec
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( (#vr.11, 0) ~~> (#vk.10, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.12, 0) ~~> (#vk.10, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.12, 0) ~~> (#vk.10, 0) ) )
                                      case d_0_verify
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              next
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case pub
                              MIRRORED
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_KGCskey
                      step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.7 ) )
                        case Sender_encrypt
                        step( solve( !KU( 'a' ) @ #vk.8 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.8 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.12 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.12 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.13, 0) ~~> (#vk.8, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.13, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.14, 0) ~~> (#vk.8, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.14, 0) ~~> (#vk.8, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( 'b' ) @ #vk.9 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.9 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.12 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.12 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.13, 0) ~~> (#vk.9, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.13, 0) ~~> (#vk.9, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.14, 0) ~~> (#vk.9, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.14, 0) ~~> (#vk.9, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        qed
                      next
                        case c_KGCpkey
                        step( solve( !KU( 'a' ) @ #vk.8 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.8 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.8 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.8 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.9, 0) ~~> (#vk.8, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.9, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.10, 0) ~~> (#vk.8, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.10, 0) ~~> (#vk.8, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( 'b' ) @ #vk.9 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.9 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.8 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.8 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.2, 0) ~~> (#vk.9, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.2, 0) ~~> (#vk.9, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.2, 0) ~~> (#vk.9, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.9, 0) ~~> (#vk.9, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#vk.9, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.10, 0) ~~> (#vk.9, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#vk.9, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.10 ) )
                              case Setup
                              MIRRORED
                            next
                              case c_Get_Masterpkey
                              MIRRORED
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case pair
        step( solve( !UserID( Masterpkey, Userskey, 'a', ~ID ) ▶₂ #vr ) )
          case Create_Id
          step( solve( !KU( sign(<~nonce, 'a'>, KGCskey(~Masterskey, 'a'))
                       ) @ #vk.4 ) )
            case Sender_encrypt
            step( solve( !KU( enc(<~nonce, 'a'>,
                                  KGCpkey(Get_Masterpkey(~Masterskey), 'b'))
                         ) @ #vk.3 ) )
              case Sender_encrypt
              step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.4 ) )
                case Sender_encrypt
                MIRRORED
              next
                case c_KGCpkey
                step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.5 ) )
                  case Setup
                  step( solve( !KU( 'b' ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( 'b' ) ▶₀ #vk.6 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.7 ) )
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_Get_Usersey
                      step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.7 ) )
                        case Create_Id
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_make_ciphertxt
                      by step( contradiction /* impossible chain */ )
                    next
                      case Dec_Oracle
                      by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                    next
                      case Encrypt_Attacker
                      by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                    next
                      case Sender_encrypt
                      step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                          case d_0_dec
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.9, 0) ~~> (#vk.6, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.9, 0) ~~> (#vk.6, 0) ) )
                            case d_0_verify
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                next
                  case c_Get_Masterpkey
                  step( solve( !KU( ~Masterskey ) @ #vk.7 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !KU( 'b' ) @ #vk.7 ) )
                      case coerce
                      step( solve( !KD( 'b' ) ▶₀ #vk.7 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.7 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.7 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                      next
                        case Encrypt_Attacker
                        by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk.7, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk.7, 0) ) )
                              case d_0_verify
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                qed
              qed
            next
              case c_enc
              step( solve( !KU( ~nonce ) @ #vk.6 ) )
                case Sender_encrypt
                step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.8 ) )
                  case Attacker_Get_Usersey
                  step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.7 ) )
                    case Sender_encrypt
                    step( solve( !KU( 'a' ) @ #vk.8 ) )
                      case coerce
                      step( solve( !KD( 'a' ) ▶₀ #vk.8 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.14 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.2, ~ID.3 ) ▶₀ #vr.14 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( contradiction /* cyclic */ )
                      next
                        case Encrypt_Attacker
                        by step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.15, 0) ~~> (#vk.8, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.15, 0) ~~> (#vk.8, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.16, 0) ~~> (#vk.8, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.16, 0) ~~> (#vk.8, 0) ) )
                              case d_0_verify
                              by step( contradiction /* cyclic */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  next
                    case c_KGCpkey
                    step( solve( !KU( 'a' ) @ #vk.8 ) )
                      case coerce
                      step( solve( !KD( 'a' ) ▶₀ #vk.8 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.10 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( contradiction /* cyclic */ )
                      next
                        case Encrypt_Attacker
                        by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.12, 0) ~~> (#vk.8, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.12, 0) ~~> (#vk.8, 0) ) )
                              case d_0_verify
                              by step( contradiction /* cyclic */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.9 ) )
                        case Setup
                        step( solve( !KU( 'b' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'b' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.11 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.12, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.12, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.13, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.13, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          MIRRORED
                        qed
                      next
                        case c_Get_Masterpkey
                        step( solve( !KU( ~Masterskey ) @ #vk.11 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !KU( 'b' ) @ #vk.11 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.11 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.11 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.12, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.12, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.13, 0) ~~> (#vk.11, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.13, 0) ~~> (#vk.11, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case c_KGCskey
                  step( solve( !KU( ~Masterskey ) @ #vk.9 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.8 ) )
                      case Sender_encrypt
                      step( solve( !KU( 'a' ) @ #vk.9 ) )
                        case coerce
                        step( solve( !KD( 'a' ) ▶₀ #vk.9 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.13 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.13 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( contradiction /* cyclic */ )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.14, 0) ~~> (#vk.9, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.14, 0) ~~> (#vk.9, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.15, 0) ~~> (#vk.9, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.15, 0) ~~> (#vk.9, 0) ) )
                                case d_0_verify
                                by step( contradiction /* cyclic */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        step( solve( !KU( 'b' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'b' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.13 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.13 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.14, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.14, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.15, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.15, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          MIRRORED
                        qed
                      qed
                    next
                      case c_KGCpkey
                      step( solve( !KU( 'a' ) @ #vk.9 ) )
                        case coerce
                        step( solve( !KD( 'a' ) ▶₀ #vk.9 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.9 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( contradiction /* cyclic */ )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.2, 0) ~~> (#vk.9, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.2, 0) ~~> (#vk.9, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.10, 0) ~~> (#vk.9, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.10, 0) ~~> (#vk.9, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.11, 0) ~~> (#vk.9, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.11, 0) ~~> (#vk.9, 0) ) )
                                case d_0_verify
                                by step( contradiction /* cyclic */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        step( solve( !KU( 'b' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'b' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.9 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( solve( (#vl.2, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.2, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.2, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.10, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.11, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.11 ) )
                            case Setup
                            MIRRORED
                          next
                            case c_Get_Masterpkey
                            MIRRORED
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case c_sign
            step( solve( !KU( ~nonce ) @ #vk.7 ) )
              case Sender_encrypt
              step( solve( !KU( KGCskey(~Masterskey, 'a') ) @ #vk.7 ) )
                case Attacker_Get_Usersey
                step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.9 ) )
                  case Attacker_Get_Usersey
                  step( solve( !KU( enc(<~nonce, 'a'>,
                                        KGCpkey(Get_Masterpkey(~Masterskey), 'b'))
                               ) @ #vk.7 ) )
                    case Sender_encrypt
                    step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.8 ) )
                      case Sender_encrypt
                      step( solve( !KU( 'a' ) @ #vk.9 ) )
                        case coerce
                        step( solve( !KD( 'a' ) ▶₀ #vk.9 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.15 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.2, ~ID.4 ) ▶₀ #vr.15 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( contradiction /* cyclic */ )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.16, 0) ~~> (#vk.9, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.16, 0) ~~> (#vk.9, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.17, 0) ~~> (#vk.9, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.17, 0) ~~> (#vk.9, 0) ) )
                                case d_0_verify
                                by step( contradiction /* cyclic */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        MIRRORED
                      qed
                    next
                      case c_KGCpkey
                      step( solve( !KU( 'a' ) @ #vk.9 ) )
                        case coerce
                        step( solve( !KD( 'a' ) ▶₀ #vk.9 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.1, ~ID.3 ) ▶₀ #vr.11 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( contradiction /* cyclic */ )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.12, 0) ~~> (#vk.9, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.12, 0) ~~> (#vk.9, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.13, 0) ~~> (#vk.9, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.13, 0) ~~> (#vk.9, 0) ) )
                                case d_0_verify
                                by step( contradiction /* cyclic */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.10 ) )
                          case Setup
                          step( solve( !KU( 'b' ) @ #vk.11 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.11 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.12 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.3 ) ▶₀ #vr.12 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.4, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.4, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.4, 0) ~~> (#vk.11, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.13, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.13, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.14, 0) ~~> (#vk.11, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.14, 0) ~~> (#vk.11, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        next
                          case c_Get_Masterpkey
                          step( solve( !KU( ~Masterskey ) @ #vk.12 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !KU( 'b' ) @ #vk.12 ) )
                              case coerce
                              step( solve( !KD( 'b' ) ▶₀ #vk.12 ) )
                                case Attacker_Get_Masterskey
                                step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.12 ) )
                                  case Setup
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_Get_Usersey
                                step( solve( !UserID( Masterpkey, t, $User.1, ~ID.3 ) ▶₀ #vr.12 ) )
                                  case Create_Id
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_make_ciphertxt
                                by step( contradiction /* impossible chain */ )
                              next
                                case Dec_Oracle
                                by step( solve( (#vl.4, 0) ~~> (#vk.12, 0) ) )
                              next
                                case Encrypt_Attacker
                                by step( solve( (#vl.4, 0) ~~> (#vk.12, 0) ) )
                              next
                                case Sender_encrypt
                                step( solve( (#vl.4, 0) ~~> (#vk.12, 0) ) )
                                  case d_0_fst
                                  step( solve( (#vr.13, 0) ~~> (#vk.12, 0) ) )
                                    case d_0_dec
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( (#vr.13, 0) ~~> (#vk.12, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.14, 0) ~~> (#vk.12, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.14, 0) ~~> (#vk.12, 0) ) )
                                      case d_0_verify
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              next
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case pub
                              MIRRORED
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_enc
                    step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.8 ) )
                      case Sender_encrypt
                      step( solve( !KU( 'a' ) @ #vk.9 ) )
                        case coerce
                        step( solve( !KD( 'a' ) ▶₀ #vk.9 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.14 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.2, ~ID.4 ) ▶₀ #vr.14 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( contradiction /* cyclic */ )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.15, 0) ~~> (#vk.9, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.15, 0) ~~> (#vk.9, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.16, 0) ~~> (#vk.9, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.16, 0) ~~> (#vk.9, 0) ) )
                                case d_0_verify
                                by step( contradiction /* cyclic */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        MIRRORED
                      qed
                    next
                      case c_KGCpkey
                      step( solve( !KU( 'a' ) @ #vk.9 ) )
                        case coerce
                        step( solve( !KD( 'a' ) ▶₀ #vk.9 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.1, ~ID.3 ) ▶₀ #vr.10 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( contradiction /* cyclic */ )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.11, 0) ~~> (#vk.9, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.11, 0) ~~> (#vk.9, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.12, 0) ~~> (#vk.9, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.12, 0) ~~> (#vk.9, 0) ) )
                                case d_0_verify
                                by step( contradiction /* cyclic */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.10 ) )
                          case Setup
                          step( solve( !KU( 'b' ) @ #vk.11 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.11 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.3 ) ▶₀ #vr.11 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.4, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.4, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.4, 0) ~~> (#vk.11, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.12, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.12, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.13, 0) ~~> (#vk.11, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.13, 0) ~~> (#vk.11, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        next
                          case c_Get_Masterpkey
                          step( solve( !KU( ~Masterskey ) @ #vk.12 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !KU( 'b' ) @ #vk.12 ) )
                              case coerce
                              step( solve( !KD( 'b' ) ▶₀ #vk.12 ) )
                                case Attacker_Get_Masterskey
                                step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                                  case Setup
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_Get_Usersey
                                step( solve( !UserID( Masterpkey, t, $User.1, ~ID.3 ) ▶₀ #vr.11 ) )
                                  case Create_Id
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_make_ciphertxt
                                by step( contradiction /* impossible chain */ )
                              next
                                case Dec_Oracle
                                by step( solve( (#vl.4, 0) ~~> (#vk.12, 0) ) )
                              next
                                case Encrypt_Attacker
                                by step( solve( (#vl.4, 0) ~~> (#vk.12, 0) ) )
                              next
                                case Sender_encrypt
                                step( solve( (#vl.4, 0) ~~> (#vk.12, 0) ) )
                                  case d_0_fst
                                  step( solve( (#vr.12, 0) ~~> (#vk.12, 0) ) )
                                    case d_0_dec
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk.12, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.13, 0) ~~> (#vk.12, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk.12, 0) ) )
                                      case d_0_verify
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              next
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case pub
                              MIRRORED
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case c_KGCskey
                  step( solve( !KU( ~Masterskey ) @ #vk.10 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !KU( enc(<~nonce, 'a'>,
                                          KGCpkey(Get_Masterpkey(~Masterskey), 'b'))
                                 ) @ #vk.8 ) )
                      case Sender_encrypt
                      step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.9 ) )
                        case Sender_encrypt
                        step( solve( !KU( 'a' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.14 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.2, ~ID.3 ) ▶₀ #vr.14 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.15, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.15, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.16, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.16, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( 'b' ) @ #vk.11 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.11 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.14 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.2, ~ID.3 ) ▶₀ #vr.14 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.4, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.4, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.4, 0) ~~> (#vk.11, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.15, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.15, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.16, 0) ~~> (#vk.11, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.16, 0) ~~> (#vk.11, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        qed
                      next
                        case c_KGCpkey
                        step( solve( !KU( 'a' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.10 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.11, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.11, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.12, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.12, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( 'b' ) @ #vk.11 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.11 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.10 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.11, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.12, 0) ~~> (#vk.11, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk.11, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.12 ) )
                              case Setup
                              MIRRORED
                            next
                              case c_Get_Masterpkey
                              MIRRORED
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_enc
                      step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.9 ) )
                        case Sender_encrypt
                        step( solve( !KU( 'a' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.13 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.2, ~ID.3 ) ▶₀ #vr.13 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.14, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.14, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.15, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.15, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( 'b' ) @ #vk.11 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.11 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.13 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.2, ~ID.3 ) ▶₀ #vr.13 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.4, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.4, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.4, 0) ~~> (#vk.11, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.14, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.14, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.15, 0) ~~> (#vk.11, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.15, 0) ~~> (#vk.11, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        qed
                      next
                        case c_KGCpkey
                        step( solve( !KU( 'a' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.9 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.10, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.11, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( 'b' ) @ #vk.11 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.11 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.9 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.10, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.10, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.11, 0) ~~> (#vk.11, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.11, 0) ~~> (#vk.11, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.12 ) )
                              case Setup
                              MIRRORED
                            next
                              case c_Get_Masterpkey
                              MIRRORED
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_KGCskey
                step( solve( !KU( ~Masterskey ) @ #vk.10 ) )
                  case Attacker_Get_Masterskey
                  step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.10 ) )
                    case Attacker_Get_Usersey
                    step( solve( !KU( enc(<~nonce, 'a'>,
                                          KGCpkey(Get_Masterpkey(~Masterskey), 'b'))
                                 ) @ #vk.8 ) )
                      case Sender_encrypt
                      step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.9 ) )
                        case Sender_encrypt
                        step( solve( !KU( 'a' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.14 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.2, ~ID.3 ) ▶₀ #vr.14 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.15, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.15, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.16, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.16, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          MIRRORED
                        qed
                      next
                        case c_KGCpkey
                        step( solve( !KU( 'a' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.10 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.11, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.11, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.12, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.12, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.11 ) )
                            case Setup
                            step( solve( !KU( 'b' ) @ #vk.12 ) )
                              case coerce
                              step( solve( !KD( 'b' ) ▶₀ #vk.12 ) )
                                case Attacker_Get_Masterskey
                                step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                                  case Setup
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_Get_Usersey
                                step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.11 ) )
                                  case Create_Id
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_make_ciphertxt
                                by step( contradiction /* impossible chain */ )
                              next
                                case Dec_Oracle
                                by step( solve( (#vl.4, 0) ~~> (#vk.12, 0) ) )
                              next
                                case Encrypt_Attacker
                                by step( solve( (#vl.4, 0) ~~> (#vk.12, 0) ) )
                              next
                                case Sender_encrypt
                                step( solve( (#vl.4, 0) ~~> (#vk.12, 0) ) )
                                  case d_0_fst
                                  step( solve( (#vr.12, 0) ~~> (#vk.12, 0) ) )
                                    case d_0_dec
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk.12, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.13, 0) ~~> (#vk.12, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk.12, 0) ) )
                                      case d_0_verify
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              next
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case pub
                              MIRRORED
                            qed
                          next
                            case c_Get_Masterpkey
                            step( solve( !KU( 'b' ) @ #vk.12 ) )
                              case coerce
                              step( solve( !KD( 'b' ) ▶₀ #vk.12 ) )
                                case Attacker_Get_Masterskey
                                step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                                  case Setup
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_Get_Usersey
                                step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.10 ) )
                                  case Create_Id
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_make_ciphertxt
                                by step( contradiction /* impossible chain */ )
                              next
                                case Dec_Oracle
                                by step( solve( (#vl.3, 0) ~~> (#vk.12, 0) ) )
                              next
                                case Encrypt_Attacker
                                by step( solve( (#vl.3, 0) ~~> (#vk.12, 0) ) )
                              next
                                case Sender_encrypt
                                step( solve( (#vl.3, 0) ~~> (#vk.12, 0) ) )
                                  case d_0_fst
                                  step( solve( (#vr.11, 0) ~~> (#vk.12, 0) ) )
                                    case d_0_dec
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( (#vr.11, 0) ~~> (#vk.12, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.12, 0) ~~> (#vk.12, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.12, 0) ~~> (#vk.12, 0) ) )
                                      case d_0_verify
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              next
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case pub
                              MIRRORED
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_enc
                      step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.9 ) )
                        case Sender_encrypt
                        step( solve( !KU( 'a' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.13 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.2, ~ID.3 ) ▶₀ #vr.13 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.14, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.14, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.15, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.15, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          MIRRORED
                        qed
                      next
                        case c_KGCpkey
                        step( solve( !KU( 'a' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.9 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.10, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.11, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.11 ) )
                            case Setup
                            step( solve( !KU( 'b' ) @ #vk.12 ) )
                              case coerce
                              step( solve( !KD( 'b' ) ▶₀ #vk.12 ) )
                                case Attacker_Get_Masterskey
                                step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                                  case Setup
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_Get_Usersey
                                step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.10 ) )
                                  case Create_Id
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_make_ciphertxt
                                by step( contradiction /* impossible chain */ )
                              next
                                case Dec_Oracle
                                by step( solve( (#vl.4, 0) ~~> (#vk.12, 0) ) )
                              next
                                case Encrypt_Attacker
                                by step( solve( (#vl.4, 0) ~~> (#vk.12, 0) ) )
                              next
                                case Sender_encrypt
                                step( solve( (#vl.4, 0) ~~> (#vk.12, 0) ) )
                                  case d_0_fst
                                  step( solve( (#vr.11, 0) ~~> (#vk.12, 0) ) )
                                    case d_0_dec
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( (#vr.11, 0) ~~> (#vk.12, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.12, 0) ~~> (#vk.12, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.12, 0) ~~> (#vk.12, 0) ) )
                                      case d_0_verify
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              next
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case pub
                              MIRRORED
                            qed
                          next
                            case c_Get_Masterpkey
                            step( solve( !KU( 'b' ) @ #vk.12 ) )
                              case coerce
                              step( solve( !KD( 'b' ) ▶₀ #vk.12 ) )
                                case Attacker_Get_Masterskey
                                step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                                  case Setup
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_Get_Usersey
                                step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.9 ) )
                                  case Create_Id
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_make_ciphertxt
                                by step( contradiction /* impossible chain */ )
                              next
                                case Dec_Oracle
                                by step( solve( (#vl.3, 0) ~~> (#vk.12, 0) ) )
                              next
                                case Encrypt_Attacker
                                by step( solve( (#vl.3, 0) ~~> (#vk.12, 0) ) )
                              next
                                case Sender_encrypt
                                step( solve( (#vl.3, 0) ~~> (#vk.12, 0) ) )
                                  case d_0_fst
                                  step( solve( (#vr.10, 0) ~~> (#vk.12, 0) ) )
                                    case d_0_dec
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#vk.12, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.11, 0) ~~> (#vk.12, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.11, 0) ~~> (#vk.12, 0) ) )
                                      case d_0_verify
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              next
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case pub
                              MIRRORED
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_KGCskey
                    step( solve( !KU( enc(<~nonce, 'a'>,
                                          KGCpkey(Get_Masterpkey(~Masterskey), 'b'))
                                 ) @ #vk.8 ) )
                      case Sender_encrypt
                      step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.9 ) )
                        case Sender_encrypt
                        step( solve( !KU( 'a' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.12 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.12 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.13, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.13, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.14, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.14, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( 'b' ) @ #vk.11 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.11 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.12 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.12 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.13, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.13, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.14, 0) ~~> (#vk.11, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.14, 0) ~~> (#vk.11, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        qed
                      next
                        case c_KGCpkey
                        step( solve( !KU( 'a' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.8 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.8 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.2, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.2, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.9, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.9, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.10, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.10, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( 'b' ) @ #vk.11 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.11 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.8 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.8 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.2, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.2, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.2, 0) ~~> (#vk.11, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.9, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.10, 0) ~~> (#vk.11, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#vk.11, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.12 ) )
                              case Setup
                              MIRRORED
                            next
                              case c_Get_Masterpkey
                              MIRRORED
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_enc
                      step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.9 ) )
                        case Sender_encrypt
                        step( solve( !KU( 'a' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.11 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.12, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.12, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.13, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.13, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( 'b' ) @ #vk.11 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.11 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.11 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.12, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.12, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.13, 0) ~~> (#vk.11, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.13, 0) ~~> (#vk.11, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        qed
                      next
                        case c_KGCpkey
                        step( solve( !KU( 'a' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.7 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.7 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.2, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.2, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.8, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.8, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.9, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( 'b' ) @ #vk.11 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.11 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.7 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.7 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.2, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.2, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.2, 0) ~~> (#vk.11, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.8, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.8, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.9, 0) ~~> (#vk.11, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.9, 0) ~~> (#vk.11, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.12 ) )
                              case Setup
                              MIRRORED
                            next
                              case c_Get_Masterpkey
                              MIRRORED
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Setup
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_fst
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case Get_Masterpkey
          step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk ) )
            case Setup
            MIRRORED
          next
            case c_Get_Masterpkey
            step( solve( !KU( ~Masterskey ) @ #vk.1 ) )
              case Attacker_Get_Masterskey
              MIRRORED
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case Const_pub_KGC
          step( solve( !KU( 'KGC' ) @ #vk ) )
            case coerce
            step( solve( !KD( 'KGC' ) ▶₀ #vk ) )
              case Attacker_Get_Masterskey
              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.2 ) )
                case Setup
                by step( contradiction /* impossible chain */ )
              qed
            next
              case Attacker_Get_Usersey
              step( solve( !UserID( Masterpkey, t, $User, ~ID ) ▶₀ #vr.2 ) )
                case Create_Id
                by step( contradiction /* impossible chain */ )
              qed
            next
              case Attacker_make_ciphertxt
              by step( contradiction /* impossible chain */ )
            next
              case Dec_Oracle
              by step( contradiction /* cyclic */ )
            next
              case Encrypt_Attacker
              by step( contradiction /* cyclic */ )
            next
              case Sender_encrypt
              step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                case d_0_fst
                step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                  case d_0_dec
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_verify
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              qed
            next
              case Setup
              by step( contradiction /* impossible chain */ )
            qed
          next
            case pub
            MIRRORED
          qed
        qed
      next
        case pair
        step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.1 ) )
          case Setup
          step( solve( !KU( 'KGC' ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( 'KGC' ) ▶₀ #vk.2 ) )
              case Attacker_Get_Masterskey
              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.2 ) )
                case Setup
                by step( contradiction /* impossible chain */ )
              qed
            next
              case Attacker_Get_Usersey
              step( solve( !UserID( Masterpkey, t, $User, ~ID ) ▶₀ #vr.2 ) )
                case Create_Id
                by step( contradiction /* impossible chain */ )
              qed
            next
              case Attacker_make_ciphertxt
              by step( contradiction /* impossible chain */ )
            next
              case Dec_Oracle
              by step( contradiction /* cyclic */ )
            next
              case Encrypt_Attacker
              by step( contradiction /* cyclic */ )
            next
              case Sender_encrypt
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
                  case d_0_dec
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                    case d_0_verify
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              qed
            next
              case Setup
              by step( contradiction /* impossible chain */ )
            qed
          next
            case pub
            MIRRORED
          qed
        next
          case c_Get_Masterpkey
          step( solve( !KU( ~Masterskey ) @ #vk.3 ) )
            case Attacker_Get_Masterskey
            step( solve( !KU( 'KGC' ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( 'KGC' ) ▶₀ #vk.3 ) )
                case Attacker_Get_Masterskey
                step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.2 ) )
                  case Setup
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case Attacker_Get_Usersey
                step( solve( !UserID( Masterpkey, t, $User, ~ID ) ▶₀ #vr.2 ) )
                  case Create_Id
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case Attacker_make_ciphertxt
                by step( contradiction /* impossible chain */ )
              next
                case Dec_Oracle
                by step( contradiction /* cyclic */ )
              next
                case Encrypt_Attacker
                by step( contradiction /* cyclic */ )
              next
                case Sender_encrypt
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
                    case d_0_dec
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                      case d_0_verify
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                qed
              next
                case Setup
                by step( contradiction /* impossible chain */ )
              qed
            next
              case pub
              MIRRORED
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case Attacker_Get_Masterskey
      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr ) )
        case Setup
        step( solve( (#vl, 0) ~~> (#i, 1) ) )
          case Var_fresh_Masterskey
          step( solve( !KU( ~Masterskey ) @ #vk ) )
            case Attacker_Get_Masterskey
            MIRRORED
          qed
        qed
      qed
    next
      case Attacker_Get_Usersey
      step( solve( !UserID( Masterpkey, t, $User, ~ID ) ▶₀ #vr ) )
        case Create_Id
        step( solve( (#vl, 0) ~~> (#i, 1) ) )
          case KGCskey
          step( solve( !KU( KGCskey(~Masterskey, $User) ) @ #vk ) )
            case Attacker_Get_Usersey
            MIRRORED
          next
            case c_KGCskey
            step( solve( !KU( ~Masterskey ) @ #vk.1 ) )
              case Attacker_Get_Masterskey
              step( solve( !KU( $User ) @ #vk.2 ) )
                case coerce
                step( solve( !KD( $User ) ▶₀ #vk.2 ) )
                  case Attacker_Get_Masterskey
                  step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.4 ) )
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Attacker_Get_Usersey
                  step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.4 ) )
                    case Create_Id
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Attacker_make_ciphertxt
                  by step( contradiction /* impossible chain */ )
                next
                  case Dec_Oracle
                  by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                next
                  case Encrypt_Attacker
                  by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                next
                  case Sender_encrypt
                  step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                      case d_0_dec
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        case d_0_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Setup
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case pub
                MIRRORED
              qed
            qed
          qed
        qed
      qed
    next
      case Attacker_make_ciphertxt
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case enc
        step( solve( !KU( enc(<'MsterKey', 'KGC', ~n>, ~Masterskey) ) @ #vk ) )
          case Attacker_make_ciphertxt
          MIRRORED
        next
          case c_enc
          by step( solve( !KU( ~Masterskey ) @ #vk.3 ) )
        qed
      qed
    next
      case Dec_Oracle
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case dec
        step( solve( !UserID( Masterpkey, Userskey, 'b', ~ID ) ▶₁ #vr ) )
          case Create_Id
          by step( solve( St_Sender( Get_Masterpkey(~Masterskey.1),
                                     KGCskey(~Masterskey.1, 'b'), ~ID, ~nonce
                          ) ▶₂ #vr ) )
        qed
      qed
    next
      case Encrypt_Attacker
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case enc
        step( solve( !Make_Masterskey( ~Masterskey, 'KGC' ) ▶₀ #vr ) )
          case Setup
          step( solve( St_Oracle( m_ ) ▶₃ #vr ) )
            case Attacker_make_ciphertxt
            step( solve( !KU( ~m ) @ #vk.10 ) )
              case Attacker_Get_Masterskey
              step( solve( !KU( 'MsterKey' ) @ #vk.6 ) )
                case coerce
                step( solve( !KD( 'MsterKey' ) ▶₀ #vk.5 ) )
                  case Attacker_Get_Masterskey
                  step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.4 ) )
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Attacker_Get_Usersey
                  step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.4 ) )
                    case Create_Id
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Attacker_make_ciphertxt
                  by step( contradiction /* impossible chain */ )
                next
                  case Dec_Oracle
                  by step( contradiction /* cyclic */ )
                next
                  case Encrypt_Attacker
                  by step( contradiction /* cyclic */ )
                next
                  case Sender_encrypt
                  step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                      case d_0_dec
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                        case d_0_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Setup
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case pub
                step( solve( !KU( 'KGC' ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( 'KGC' ) ▶₀ #vk.6 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.4 ) )
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_Get_Usersey
                    step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.4 ) )
                      case Create_Id
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_make_ciphertxt
                    by step( contradiction /* impossible chain */ )
                  next
                    case Dec_Oracle
                    by step( contradiction /* cyclic */ )
                  next
                    case Encrypt_Attacker
                    by step( contradiction /* cyclic */ )
                  next
                    case Sender_encrypt
                    step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                        case d_0_dec
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.6, 0) ~~> (#vk.6, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.6, 0) ~~> (#vk.6, 0) ) )
                          case d_0_verify
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case pub
                  step( solve( !KU( 'UserKey' ) @ #vk.9 ) )
                    case coerce
                    step( solve( !KD( 'UserKey' ) ▶₀ #vk.7 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.4 ) )
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_Get_Usersey
                      step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.4 ) )
                        case Create_Id
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_make_ciphertxt
                      by step( contradiction /* impossible chain */ )
                    next
                      case Dec_Oracle
                      by step( contradiction /* cyclic */ )
                    next
                      case Encrypt_Attacker
                      by step( contradiction /* cyclic */ )
                    next
                      case Sender_encrypt
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.5, 0) ~~> (#vk.7, 0) ) )
                          case d_0_dec
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#vk.7, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.6, 0) ~~> (#vk.7, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.6, 0) ~~> (#vk.7, 0) ) )
                            case d_0_verify
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    step( solve( !KU( $User ) @ #vk.10 ) )
                      case coerce
                      step( solve( !KD( $User ) ▶₀ #vk.8 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.4 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.4 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                      next
                        case Encrypt_Attacker
                        by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.5, 0) ~~> (#vk.8, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.5, 0) ~~> (#vk.8, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.6, 0) ~~> (#vk.8, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.6, 0) ~~> (#vk.8, 0) ) )
                              case d_0_verify
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      step( solve( !KU( enc(<'MsterKey', 'KGC', 
                                             enc(<'MsterKey', 'KGC', ~n>, ~Masterskey)>,
                                            ~m)
                                   ) @ #vk.9 ) )
                        case Encrypt_Attacker
                        step( solve( !KU( enc(<'MsterKey', 'KGC', ~n>, ~Masterskey)
                                     ) @ #vk.10 ) )
                          case Attacker_make_ciphertxt
                          MIRRORED
                        next
                          case c_enc
                          by step( solve( !KU( ~Masterskey ) @ #vk.13 ) )
                        qed
                      next
                        case c_enc
                        step( solve( !KU( enc(<'MsterKey', 'KGC', ~n>, ~Masterskey)
                                     ) @ #vk.10 ) )
                          case Attacker_make_ciphertxt
                          MIRRORED
                        next
                          case c_enc
                          by step( solve( !KU( ~Masterskey ) @ #vk.13 ) )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Sender_encrypt
              step( solve( !KU( KGCskey(~Masterskey.1, 'b') ) @ #vk.11 ) )
                case Attacker_Get_Usersey
                step( solve( !KU( 'MsterKey' ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( 'MsterKey' ) ▶₀ #vk.6 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_Get_Usersey
                    step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.10 ) )
                      case Create_Id
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_make_ciphertxt
                    by step( contradiction /* impossible chain */ )
                  next
                    case Dec_Oracle
                    by step( contradiction /* cyclic */ )
                  next
                    case Encrypt_Attacker
                    by step( contradiction /* cyclic */ )
                  next
                    case Sender_encrypt
                    step( solve( (#vl.3, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.11, 0) ~~> (#vk.6, 0) ) )
                        case d_0_dec
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.11, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.12, 0) ~~> (#vk.6, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.12, 0) ~~> (#vk.6, 0) ) )
                          case d_0_verify
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case pub
                  step( solve( !KU( 'KGC' ) @ #vk.8 ) )
                    case coerce
                    step( solve( !KD( 'KGC' ) ▶₀ #vk.7 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_Get_Usersey
                      step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.10 ) )
                        case Create_Id
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_make_ciphertxt
                      by step( contradiction /* impossible chain */ )
                    next
                      case Dec_Oracle
                      by step( contradiction /* cyclic */ )
                    next
                      case Encrypt_Attacker
                      by step( contradiction /* cyclic */ )
                    next
                      case Sender_encrypt
                      step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.11, 0) ~~> (#vk.7, 0) ) )
                          case d_0_dec
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.11, 0) ~~> (#vk.7, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.12, 0) ~~> (#vk.7, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.12, 0) ~~> (#vk.7, 0) ) )
                            case d_0_verify
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    step( solve( !KU( 'UserKey' ) @ #vk.10 ) )
                      case coerce
                      step( solve( !KD( 'UserKey' ) ▶₀ #vk.8 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.10 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( contradiction /* cyclic */ )
                      next
                        case Encrypt_Attacker
                        by step( contradiction /* cyclic */ )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.12, 0) ~~> (#vk.8, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.12, 0) ~~> (#vk.8, 0) ) )
                              case d_0_verify
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      step( solve( !KU( $User ) @ #vk.11 ) )
                        case coerce
                        step( solve( !KD( $User ) ▶₀ #vk.9 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.10 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.11, 0) ~~> (#vk.9, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.11, 0) ~~> (#vk.9, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.12, 0) ~~> (#vk.9, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.12, 0) ~~> (#vk.9, 0) ) )
                                case d_0_verify
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        step( solve( !KU( enc(<'MsterKey', 'KGC', 
                                               enc(<'MsterKey', 'KGC', ~n>, ~Masterskey)>,
                                              ~Masterskey.1)
                                     ) @ #vk.10 ) )
                          case Encrypt_Attacker
                          step( solve( !KU( enc(<'MsterKey', 'KGC', ~n>, ~Masterskey)
                                       ) @ #vk.11 ) )
                            case Attacker_make_ciphertxt
                            MIRRORED
                          next
                            case c_enc
                            by step( solve( !KU( ~Masterskey ) @ #vk.14 ) )
                          qed
                        next
                          case c_enc
                          step( solve( !KU( ~Masterskey.1 ) @ #vk.12 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !KU( enc(<'MsterKey', 'KGC', ~n>, ~Masterskey)
                                         ) @ #vk.12 ) )
                              case Attacker_make_ciphertxt
                              MIRRORED
                            next
                              case c_enc
                              by step( solve( !KU( ~Masterskey ) @ #vk.15 ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_KGCskey
                step( solve( !KU( ~Masterskey.1 ) @ #vk.12 ) )
                  case Attacker_Get_Masterskey
                  step( solve( !KU( 'MsterKey' ) @ #vk.8 ) )
                    case coerce
                    step( solve( !KD( 'MsterKey' ) ▶₀ #vk.7 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_Get_Usersey
                      step( solve( !UserID( Masterpkey, t, $User.2, ~ID.1 ) ▶₀ #vr.9 ) )
                        case Create_Id
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_make_ciphertxt
                      by step( contradiction /* impossible chain */ )
                    next
                      case Dec_Oracle
                      by step( contradiction /* cyclic */ )
                    next
                      case Encrypt_Attacker
                      by step( contradiction /* cyclic */ )
                    next
                      case Sender_encrypt
                      step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.10, 0) ~~> (#vk.7, 0) ) )
                          case d_0_dec
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.10, 0) ~~> (#vk.7, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.11, 0) ~~> (#vk.7, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.11, 0) ~~> (#vk.7, 0) ) )
                            case d_0_verify
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    step( solve( !KU( 'KGC' ) @ #vk.9 ) )
                      case coerce
                      step( solve( !KD( 'KGC' ) ▶₀ #vk.8 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.2, ~ID.1 ) ▶₀ #vr.9 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( contradiction /* cyclic */ )
                      next
                        case Encrypt_Attacker
                        by step( contradiction /* cyclic */ )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.10, 0) ~~> (#vk.8, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.10, 0) ~~> (#vk.8, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                              case d_0_verify
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      step( solve( !KU( 'UserKey' ) @ #vk.11 ) )
                        case coerce
                        step( solve( !KD( 'UserKey' ) ▶₀ #vk.9 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.2, ~ID.1 ) ▶₀ #vr.9 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( contradiction /* cyclic */ )
                        next
                          case Encrypt_Attacker
                          by step( contradiction /* cyclic */ )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.10, 0) ~~> (#vk.9, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.10, 0) ~~> (#vk.9, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.11, 0) ~~> (#vk.9, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.11, 0) ~~> (#vk.9, 0) ) )
                                case d_0_verify
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        step( solve( !KU( $User ) @ #vk.12 ) )
                          case coerce
                          step( solve( !KD( $User ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.2, ~ID.1 ) ▶₀ #vr.9 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.10, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.11, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( enc(<'MsterKey', 'KGC', 
                                                 enc(<'MsterKey', 'KGC', ~n>, ~Masterskey)>,
                                                ~Masterskey.1)
                                       ) @ #vk.11 ) )
                            case Encrypt_Attacker
                            step( solve( !KU( enc(<'MsterKey', 'KGC', ~n>, ~Masterskey)
                                         ) @ #vk.12 ) )
                              case Attacker_make_ciphertxt
                              step( solve( !KU( 'b' ) @ #vk.13 ) )
                                case coerce
                                step( solve( !KD( 'b' ) ▶₀ #vk.13 ) )
                                  case Attacker_Get_Masterskey
                                  step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                                    case Setup
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case Attacker_Get_Usersey
                                  step( solve( !UserID( Masterpkey, t, $User.2, ~ID.1 ) ▶₀ #vr.9 ) )
                                    case Create_Id
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case Attacker_make_ciphertxt
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case Dec_Oracle
                                  by step( solve( (#vl.4, 0) ~~> (#vk.13, 0) ) )
                                next
                                  case Encrypt_Attacker
                                  by step( solve( (#vl.4, 0) ~~> (#vk.13, 0) ) )
                                next
                                  case Sender_encrypt
                                  step( solve( (#vl.4, 0) ~~> (#vk.13, 0) ) )
                                    case d_0_fst
                                    step( solve( (#vr.10, 0) ~~> (#vk.13, 0) ) )
                                      case d_0_dec
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.10, 0) ~~> (#vk.13, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.11, 0) ~~> (#vk.13, 0) ) )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.11, 0) ~~> (#vk.13, 0) ) )
                                        case d_0_verify
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                next
                                  case Setup
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case pub
                                MIRRORED
                              qed
                            next
                              case c_enc
                              by step( solve( !KU( ~Masterskey ) @ #vk.16 ) )
                            qed
                          next
                            case c_enc
                            step( solve( !KU( enc(<'MsterKey', 'KGC', ~n>, ~Masterskey)
                                         ) @ #vk.12 ) )
                              case Attacker_make_ciphertxt
                              step( solve( !KU( 'b' ) @ #vk.13 ) )
                                case coerce
                                step( solve( !KD( 'b' ) ▶₀ #vk.13 ) )
                                  case Attacker_Get_Masterskey
                                  step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                                    case Setup
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case Attacker_Get_Usersey
                                  step( solve( !UserID( Masterpkey, t, $User.2, ~ID.1 ) ▶₀ #vr.9 ) )
                                    case Create_Id
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case Attacker_make_ciphertxt
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case Dec_Oracle
                                  by step( solve( (#vl.4, 0) ~~> (#vk.13, 0) ) )
                                next
                                  case Encrypt_Attacker
                                  by step( solve( (#vl.4, 0) ~~> (#vk.13, 0) ) )
                                next
                                  case Sender_encrypt
                                  step( solve( (#vl.4, 0) ~~> (#vk.13, 0) ) )
                                    case d_0_fst
                                    step( solve( (#vr.10, 0) ~~> (#vk.13, 0) ) )
                                      case d_0_dec
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.10, 0) ~~> (#vk.13, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.11, 0) ~~> (#vk.13, 0) ) )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.11, 0) ~~> (#vk.13, 0) ) )
                                        case d_0_verify
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                next
                                  case Setup
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case pub
                                MIRRORED
                              qed
                            next
                              case c_enc
                              by step( solve( !KU( ~Masterskey ) @ #vk.16 ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case fresh
              step( solve( !KU( 'MsterKey' ) @ #vk.6 ) )
                case coerce
                step( solve( !KD( 'MsterKey' ) ▶₀ #vk.5 ) )
                  case Attacker_Get_Masterskey
                  step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.3 ) )
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Attacker_Get_Usersey
                  step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.3 ) )
                    case Create_Id
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Attacker_make_ciphertxt
                  by step( contradiction /* impossible chain */ )
                next
                  case Dec_Oracle
                  by step( contradiction /* cyclic */ )
                next
                  case Encrypt_Attacker
                  by step( contradiction /* cyclic */ )
                next
                  case Sender_encrypt
                  step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.4, 0) ~~> (#vk.5, 0) ) )
                      case d_0_dec
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#vk.5, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                    next
                      case d_0_snd
                      step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        case d_0_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Setup
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case pub
                step( solve( !KU( 'KGC' ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( 'KGC' ) ▶₀ #vk.6 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.3 ) )
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_Get_Usersey
                    step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.3 ) )
                      case Create_Id
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Attacker_make_ciphertxt
                    by step( contradiction /* impossible chain */ )
                  next
                    case Dec_Oracle
                    by step( contradiction /* cyclic */ )
                  next
                    case Encrypt_Attacker
                    by step( contradiction /* cyclic */ )
                  next
                    case Sender_encrypt
                    step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.4, 0) ~~> (#vk.6, 0) ) )
                        case d_0_dec
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                          case d_0_verify
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case Setup
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case pub
                  step( solve( !KU( 'UserKey' ) @ #vk.9 ) )
                    case coerce
                    step( solve( !KD( 'UserKey' ) ▶₀ #vk.7 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.3 ) )
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_Get_Usersey
                      step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.3 ) )
                        case Create_Id
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_make_ciphertxt
                      by step( contradiction /* impossible chain */ )
                    next
                      case Dec_Oracle
                      by step( contradiction /* cyclic */ )
                    next
                      case Encrypt_Attacker
                      by step( contradiction /* cyclic */ )
                    next
                      case Sender_encrypt
                      step( solve( (#vl.1, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.4, 0) ~~> (#vk.7, 0) ) )
                          case d_0_dec
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.4, 0) ~~> (#vk.7, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.5, 0) ~~> (#vk.7, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.5, 0) ~~> (#vk.7, 0) ) )
                            case d_0_verify
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    step( solve( !KU( $User ) @ #vk.10 ) )
                      case coerce
                      step( solve( !KD( $User ) ▶₀ #vk.8 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.3 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.1, ~ID ) ▶₀ #vr.3 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( solve( (#vl.1, 0) ~~> (#vk.8, 0) ) )
                      next
                        case Encrypt_Attacker
                        by step( solve( (#vl.1, 0) ~~> (#vk.8, 0) ) )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.1, 0) ~~> (#vk.8, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.4, 0) ~~> (#vk.8, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.4, 0) ~~> (#vk.8, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.5, 0) ~~> (#vk.8, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.5, 0) ~~> (#vk.8, 0) ) )
                              case d_0_verify
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      step( solve( !KU( enc(<'MsterKey', 'KGC', 
                                             enc(<'MsterKey', 'KGC', ~n>, ~Masterskey)>,
                                            ~Masterskey.1)
                                   ) @ #vk.9 ) )
                        case Encrypt_Attacker
                        step( solve( !KU( enc(<'MsterKey', 'KGC', ~n>, ~Masterskey)
                                     ) @ #vk.10 ) )
                          case Attacker_make_ciphertxt
                          MIRRORED
                        next
                          case c_enc
                          by step( solve( !KU( ~Masterskey ) @ #vk.13 ) )
                        qed
                      next
                        case c_enc
                        step( solve( !KU( ~Masterskey.1 ) @ #vk.11 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !KU( enc(<'MsterKey', 'KGC', ~n>, ~Masterskey)
                                       ) @ #vk.11 ) )
                            case Attacker_make_ciphertxt
                            MIRRORED
                          next
                            case c_enc
                            by step( solve( !KU( ~Masterskey ) @ #vk.14 ) )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Sender_encrypt
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_fst
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case d_0_dec
          step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
            case d_0_fst
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case Var_fresh_nonce
              step( solve( !UserID( Get_Masterpkey(Masterskey), Userskey, 'a', ~ID
                           ) ▶₂ #vr ) )
                case Create_Id
                step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.1 ) )
                  case Attacker_Get_Usersey
                  step( solve( !KU( ~nonce ) @ #vk.1 ) )
                    case Sender_encrypt
                    MIRRORED
                  qed
                next
                  case c_KGCskey
                  step( solve( !KU( ~Masterskey ) @ #vk.2 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !KU( ~nonce ) @ #vk.2 ) )
                      case Sender_encrypt
                      step( solve( !KU( 'b' ) @ #vk.3 ) )
                        case coerce
                        step( solve( !KD( 'b' ) ▶₀ #vk.3 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.10 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.11, 0) ~~> (#vk.3, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.11, 0) ~~> (#vk.3, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.12, 0) ~~> (#vk.3, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.12, 0) ~~> (#vk.3, 0) ) )
                                case d_0_verify
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        MIRRORED
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case Const_pub_a
              step( solve( !UserID( Get_Masterpkey(Masterskey), Userskey, 'a', ~ID
                           ) ▶₂ #vr ) )
                case Create_Id
                step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.1 ) )
                  case Attacker_Get_Usersey
                  step( solve( !KU( 'a' ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( 'a' ) ▶₀ #vk.1 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.8 ) )
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_Get_Usersey
                      step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.8 ) )
                        case Create_Id
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_make_ciphertxt
                      by step( contradiction /* impossible chain */ )
                    next
                      case Dec_Oracle
                      by step( contradiction /* cyclic */ )
                    next
                      case Encrypt_Attacker
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case Sender_encrypt
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.9, 0) ~~> (#vk.1, 0) ) )
                          case d_0_dec
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.9, 0) ~~> (#vk.1, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.10, 0) ~~> (#vk.1, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.10, 0) ~~> (#vk.1, 0) ) )
                            case d_0_verify
                            by step( contradiction /* cyclic */ )
                          qed
                        qed
                      qed
                    next
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                next
                  case c_KGCskey
                  step( solve( !KU( ~Masterskey ) @ #vk.2 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !KU( 'a' ) @ #vk.2 ) )
                      case coerce
                      step( solve( !KD( 'a' ) ▶₀ #vk.2 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.7 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.7 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( contradiction /* cyclic */ )
                      next
                        case Encrypt_Attacker
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.8, 0) ~~> (#vk.2, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk.2, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk.2, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk.2, 0) ) )
                              case d_0_verify
                              by step( contradiction /* cyclic */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      step( solve( !KU( 'b' ) @ #vk.3 ) )
                        case coerce
                        step( solve( !KD( 'b' ) ▶₀ #vk.3 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.7 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.7 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.8, 0) ~~> (#vk.3, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.8, 0) ~~> (#vk.3, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.9, 0) ~~> (#vk.3, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.9, 0) ~~> (#vk.3, 0) ) )
                                case d_0_verify
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        MIRRORED
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case pair
            step( solve( !UserID( Get_Masterpkey(Masterskey), Userskey, 'a', ~ID
                         ) ▶₂ #vr ) )
              case Create_Id
              step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.1 ) )
                case Attacker_Get_Usersey
                step( solve( !KU( ~nonce ) @ #vk.2 ) )
                  case Sender_encrypt
                  step( solve( !KU( 'a' ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( 'a' ) ▶₀ #vk.3 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_Get_Usersey
                      step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.10 ) )
                        case Create_Id
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_make_ciphertxt
                      by step( contradiction /* impossible chain */ )
                    next
                      case Dec_Oracle
                      by step( contradiction /* cyclic */ )
                    next
                      case Encrypt_Attacker
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case Sender_encrypt
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.11, 0) ~~> (#vk.3, 0) ) )
                          case d_0_dec
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.11, 0) ~~> (#vk.3, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.12, 0) ~~> (#vk.3, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.12, 0) ~~> (#vk.3, 0) ) )
                            case d_0_verify
                            by step( contradiction /* cyclic */ )
                          qed
                        qed
                      qed
                    next
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                qed
              next
                case c_KGCskey
                step( solve( !KU( ~Masterskey ) @ #vk.4 ) )
                  case Attacker_Get_Masterskey
                  step( solve( !KU( ~nonce ) @ #vk.3 ) )
                    case Sender_encrypt
                    step( solve( !KU( 'a' ) @ #vk.4 ) )
                      case coerce
                      step( solve( !KD( 'a' ) ▶₀ #vk.4 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.9 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( contradiction /* cyclic */ )
                      next
                        case Encrypt_Attacker
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.10, 0) ~~> (#vk.4, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.10, 0) ~~> (#vk.4, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.11, 0) ~~> (#vk.4, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.11, 0) ~~> (#vk.4, 0) ) )
                              case d_0_verify
                              by step( contradiction /* cyclic */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      step( solve( !KU( 'b' ) @ #vk.5 ) )
                        case coerce
                        step( solve( !KD( 'b' ) ▶₀ #vk.5 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.9 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.10, 0) ~~> (#vk.5, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.10, 0) ~~> (#vk.5, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.11, 0) ~~> (#vk.5, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.11, 0) ~~> (#vk.5, 0) ) )
                                case d_0_verify
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        MIRRORED
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case enc
          step( solve( !UserID( Masterpkey, Userskey, 'a', ~ID ) ▶₂ #vr ) )
            case Create_Id
            step( solve( !KU( enc(<~nonce, 'a'>,
                                  KGCpkey(Get_Masterpkey(~Masterskey), 'b'))
                         ) @ #vk ) )
              case Sender_encrypt
              MIRRORED
            next
              case c_enc
              step( solve( !KU( ~nonce ) @ #vk.3 ) )
                case Sender_encrypt
                step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.5 ) )
                  case Attacker_Get_Usersey
                  step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.4 ) )
                    case Sender_encrypt
                    step( solve( !KU( 'a' ) @ #vk.5 ) )
                      case coerce
                      step( solve( !KD( 'a' ) ▶₀ #vk.5 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.13 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.2, ~ID.3 ) ▶₀ #vr.13 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( contradiction /* cyclic */ )
                      next
                        case Encrypt_Attacker
                        by step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.14, 0) ~~> (#vk.5, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.14, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.15, 0) ~~> (#vk.5, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.15, 0) ~~> (#vk.5, 0) ) )
                              case d_0_verify
                              by step( contradiction /* cyclic */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  next
                    case c_KGCpkey
                    step( solve( !KU( 'a' ) @ #vk.5 ) )
                      case coerce
                      step( solve( !KD( 'a' ) ▶₀ #vk.5 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.9 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( contradiction /* cyclic */ )
                      next
                        case Encrypt_Attacker
                        by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.10, 0) ~~> (#vk.5, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.10, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.11, 0) ~~> (#vk.5, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.11, 0) ~~> (#vk.5, 0) ) )
                              case d_0_verify
                              by step( contradiction /* cyclic */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.6 ) )
                        case Setup
                        step( solve( !KU( 'b' ) @ #vk.7 ) )
                          case coerce
                          step( solve( !KD( 'b' ) ▶₀ #vk.7 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.10 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.11, 0) ~~> (#vk.7, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.11, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.12, 0) ~~> (#vk.7, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.12, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          MIRRORED
                        qed
                      next
                        case c_Get_Masterpkey
                        step( solve( !KU( ~Masterskey ) @ #vk.8 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !KU( 'b' ) @ #vk.8 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.8 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.10 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.12, 0) ~~> (#vk.8, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk.8, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case c_KGCskey
                  step( solve( !KU( ~Masterskey ) @ #vk.6 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.5 ) )
                      case Sender_encrypt
                      step( solve( !KU( 'a' ) @ #vk.6 ) )
                        case coerce
                        step( solve( !KD( 'a' ) ▶₀ #vk.6 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.12 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.12 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( contradiction /* cyclic */ )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.3, 0) ~~> (#vk.6, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.3, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.13, 0) ~~> (#vk.6, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.13, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.14, 0) ~~> (#vk.6, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.14, 0) ~~> (#vk.6, 0) ) )
                                case d_0_verify
                                by step( contradiction /* cyclic */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        step( solve( !KU( 'b' ) @ #vk.7 ) )
                          case coerce
                          step( solve( !KD( 'b' ) ▶₀ #vk.7 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.12 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.12 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.13, 0) ~~> (#vk.7, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.13, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.14, 0) ~~> (#vk.7, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.14, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          MIRRORED
                        qed
                      qed
                    next
                      case c_KGCpkey
                      step( solve( !KU( 'a' ) @ #vk.6 ) )
                        case coerce
                        step( solve( !KD( 'a' ) ▶₀ #vk.6 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.8 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.8 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( contradiction /* cyclic */ )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.9, 0) ~~> (#vk.6, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.10, 0) ~~> (#vk.6, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk.6, 0) ) )
                                case d_0_verify
                                by step( contradiction /* cyclic */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        step( solve( !KU( 'b' ) @ #vk.7 ) )
                          case coerce
                          step( solve( !KD( 'b' ) ▶₀ #vk.7 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.8 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.8 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.9, 0) ~~> (#vk.7, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.9, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.10, 0) ~~> (#vk.7, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.10, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.8 ) )
                            case Setup
                            MIRRORED
                          next
                            case c_Get_Masterpkey
                            MIRRORED
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case d_0_fst
          step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
            case KGCpkey
            step( solve( !UserID( Masterpkey, Userskey, 'a', ~ID ) ▶₂ #vr ) )
              case Create_Id
              step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk ) )
                case Sender_encrypt
                MIRRORED
              next
                case c_KGCpkey
                step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.1 ) )
                  case Setup
                  step( solve( !KU( 'b' ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( 'b' ) ▶₀ #vk.2 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.6 ) )
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_Get_Usersey
                      step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.6 ) )
                        case Create_Id
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_make_ciphertxt
                      by step( contradiction /* impossible chain */ )
                    next
                      case Dec_Oracle
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case Encrypt_Attacker
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case Sender_encrypt
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.7, 0) ~~> (#vk.2, 0) ) )
                          case d_0_dec
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk.2, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk.2, 0) ) )
                            case d_0_verify
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                next
                  case c_Get_Masterpkey
                  step( solve( !KU( ~Masterskey ) @ #vk.3 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !KU( 'b' ) @ #vk.3 ) )
                      case coerce
                      step( solve( !KD( 'b' ) ▶₀ #vk.3 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.6 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.6 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      next
                        case Encrypt_Attacker
                        by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.8, 0) ~~> (#vk.3, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.8, 0) ~~> (#vk.3, 0) ) )
                              case d_0_verify
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case d_0_snd
          step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
            case d_0_verify
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case true
              step( solve( !UserID( Masterpkey, KGCskey(Masterskey, User), 'a', ~ID
                           ) ▶₂ #vr ) )
                case Create_Id
                step( solve( !KU( ~nonce ) @ #vk.3 ) )
                  case Sender_encrypt
                  step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'a') ) @ #vk.3 ) )
                    case c_KGCpkey
                    step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.5 ) )
                      case Attacker_Get_Usersey
                      step( solve( !KU( 'a' ) @ #vk.5 ) )
                        case coerce
                        step( solve( !KD( 'a' ) ▶₀ #vk.4 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.11 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( contradiction /* cyclic */ )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.12, 0) ~~> (#vk.4, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.12, 0) ~~> (#vk.4, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.13, 0) ~~> (#vk.4, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.13, 0) ~~> (#vk.4, 0) ) )
                                case d_0_verify
                                by step( contradiction /* cyclic */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        step( solve( !KU( true ) @ #vk.5 ) )
                          case c_true
                          step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.6 ) )
                            case Setup
                            MIRRORED
                          next
                            case c_Get_Masterpkey
                            step( solve( !KU( ~Masterskey ) @ #vk.7 ) )
                              case Attacker_Get_Masterskey
                              MIRRORED
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( true ) ▶₀ #vk.5 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.11 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.12, 0) ~~> (#vk.5, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.12, 0) ~~> (#vk.5, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.13, 0) ~~> (#vk.5, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.13, 0) ~~> (#vk.5, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case c_KGCskey
                      step( solve( !KU( ~Masterskey ) @ #vk.7 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !KU( 'a' ) @ #vk.6 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.5 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.10 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.11, 0) ~~> (#vk.5, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.11, 0) ~~> (#vk.5, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.12, 0) ~~> (#vk.5, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.12, 0) ~~> (#vk.5, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( true ) @ #vk.6 ) )
                            case c_true
                            step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.7 ) )
                              case Setup
                              step( solve( !KU( 'b' ) @ #vk.8 ) )
                                case coerce
                                step( solve( !KD( 'b' ) ▶₀ #vk.8 ) )
                                  case Attacker_Get_Masterskey
                                  step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                                    case Setup
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case Attacker_Get_Usersey
                                  step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.11 ) )
                                    case Create_Id
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case Attacker_make_ciphertxt
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case Dec_Oracle
                                  by step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                                next
                                  case Encrypt_Attacker
                                  by step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                                next
                                  case Sender_encrypt
                                  step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                                    case d_0_fst
                                    step( solve( (#vr.12, 0) ~~> (#vk.8, 0) ) )
                                      case d_0_dec
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.12, 0) ~~> (#vk.8, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.13, 0) ~~> (#vk.8, 0) ) )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.13, 0) ~~> (#vk.8, 0) ) )
                                        case d_0_verify
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                next
                                  case Setup
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case pub
                                MIRRORED
                              qed
                            next
                              case c_Get_Masterpkey
                              step( solve( !KU( 'b' ) @ #vk.8 ) )
                                case coerce
                                step( solve( !KD( 'b' ) ▶₀ #vk.8 ) )
                                  case Attacker_Get_Masterskey
                                  step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                                    case Setup
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case Attacker_Get_Usersey
                                  step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.10 ) )
                                    case Create_Id
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case Attacker_make_ciphertxt
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case Dec_Oracle
                                  by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                                next
                                  case Encrypt_Attacker
                                  by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                                next
                                  case Sender_encrypt
                                  step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                                    case d_0_fst
                                    step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                                      case d_0_dec
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.12, 0) ~~> (#vk.8, 0) ) )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.12, 0) ~~> (#vk.8, 0) ) )
                                        case d_0_verify
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                next
                                  case Setup
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case pub
                                MIRRORED
                              qed
                            qed
                          next
                            case coerce
                            step( solve( !KD( true ) ▶₀ #vk.6 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.10 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.11, 0) ~~> (#vk.6, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk.6, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.12, 0) ~~> (#vk.6, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk.6, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case sign
            step( solve( !UserID( Masterpkey, Userskey, 'a', ~ID ) ▶₂ #vr ) )
              case Create_Id
              step( solve( !KU( sign(<~nonce, 'a'>, KGCskey(~Masterskey, 'a'))
                           ) @ #vk ) )
                case Sender_encrypt
                MIRRORED
              next
                case c_sign
                step( solve( !KU( ~nonce ) @ #vk.3 ) )
                  case Sender_encrypt
                  step( solve( !KU( KGCskey(~Masterskey, 'a') ) @ #vk.3 ) )
                    case Attacker_Get_Usersey
                    step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.5 ) )
                      case Attacker_Get_Usersey
                      step( solve( !KU( 'a' ) @ #vk.5 ) )
                        case coerce
                        step( solve( !KD( 'a' ) ▶₀ #vk.5 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.12 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.1, ~ID.3 ) ▶₀ #vr.12 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( contradiction /* cyclic */ )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.13, 0) ~~> (#vk.5, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.13, 0) ~~> (#vk.5, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.14, 0) ~~> (#vk.5, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.14, 0) ~~> (#vk.5, 0) ) )
                                case d_0_verify
                                by step( contradiction /* cyclic */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        MIRRORED
                      qed
                    next
                      case c_KGCskey
                      step( solve( !KU( ~Masterskey ) @ #vk.6 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !KU( 'a' ) @ #vk.6 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.6 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.11 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.6, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.12, 0) ~~> (#vk.6, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.12, 0) ~~> (#vk.6, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.13, 0) ~~> (#vk.6, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.13, 0) ~~> (#vk.6, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( 'b' ) @ #vk.7 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.7 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.11 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.12, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.12, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.13, 0) ~~> (#vk.7, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.13, 0) ~~> (#vk.7, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_KGCskey
                    step( solve( !KU( ~Masterskey ) @ #vk.6 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.6 ) )
                        case Attacker_Get_Usersey
                        step( solve( !KU( 'a' ) @ #vk.6 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.6 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.11 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.6, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.12, 0) ~~> (#vk.6, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.12, 0) ~~> (#vk.6, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.13, 0) ~~> (#vk.6, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.13, 0) ~~> (#vk.6, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          MIRRORED
                        qed
                      next
                        case c_KGCskey
                        step( solve( !KU( 'a' ) @ #vk.6 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.6 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.9 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.10, 0) ~~> (#vk.6, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk.6, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.11, 0) ~~> (#vk.6, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk.6, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( 'b' ) @ #vk.7 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.7 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.9 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.10, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.10, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.11, 0) ~~> (#vk.7, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.11, 0) ~~> (#vk.7, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case pair
          step( solve( !UserID( Masterpkey, Userskey, 'a', ~ID ) ▶₂ #vr ) )
            case Create_Id
            step( solve( !KU( sign(<~nonce, 'a'>, KGCskey(~Masterskey, 'a'))
                         ) @ #vk.2 ) )
              case Sender_encrypt
              step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.2 ) )
                case Sender_encrypt
                MIRRORED
              next
                case c_KGCpkey
                step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.3 ) )
                  case Setup
                  step( solve( !KU( 'b' ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( 'b' ) ▶₀ #vk.4 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.7 ) )
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_Get_Usersey
                      step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.7 ) )
                        case Create_Id
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_make_ciphertxt
                      by step( contradiction /* impossible chain */ )
                    next
                      case Dec_Oracle
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case Encrypt_Attacker
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case Sender_encrypt
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                          case d_0_dec
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.9, 0) ~~> (#vk.4, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.9, 0) ~~> (#vk.4, 0) ) )
                            case d_0_verify
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                next
                  case c_Get_Masterpkey
                  step( solve( !KU( ~Masterskey ) @ #vk.5 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !KU( 'b' ) @ #vk.5 ) )
                      case coerce
                      step( solve( !KD( 'b' ) ▶₀ #vk.5 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.7 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.7 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      next
                        case Encrypt_Attacker
                        by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk.5, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk.5, 0) ) )
                              case d_0_verify
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                qed
              qed
            next
              case c_sign
              step( solve( !KU( ~nonce ) @ #vk.5 ) )
                case Sender_encrypt
                step( solve( !KU( KGCskey(~Masterskey, 'a') ) @ #vk.5 ) )
                  case Attacker_Get_Usersey
                  step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.7 ) )
                    case Attacker_Get_Usersey
                    step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.6 ) )
                      case Sender_encrypt
                      step( solve( !KU( 'a' ) @ #vk.7 ) )
                        case coerce
                        step( solve( !KD( 'a' ) ▶₀ #vk.7 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.15 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.2, ~ID.4 ) ▶₀ #vr.15 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( contradiction /* cyclic */ )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.16, 0) ~~> (#vk.7, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.16, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.17, 0) ~~> (#vk.7, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.17, 0) ~~> (#vk.7, 0) ) )
                                case d_0_verify
                                by step( contradiction /* cyclic */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        MIRRORED
                      qed
                    next
                      case c_KGCpkey
                      step( solve( !KU( 'a' ) @ #vk.7 ) )
                        case coerce
                        step( solve( !KD( 'a' ) ▶₀ #vk.7 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.1, ~ID.3 ) ▶₀ #vr.11 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( contradiction /* cyclic */ )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.3, 0) ~~> (#vk.7, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.12, 0) ~~> (#vk.7, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.12, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.13, 0) ~~> (#vk.7, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.13, 0) ~~> (#vk.7, 0) ) )
                                case d_0_verify
                                by step( contradiction /* cyclic */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.8 ) )
                          case Setup
                          step( solve( !KU( 'b' ) @ #vk.9 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.9 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.12 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.3 ) ▶₀ #vr.12 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.13, 0) ~~> (#vk.9, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.13, 0) ~~> (#vk.9, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.14, 0) ~~> (#vk.9, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.14, 0) ~~> (#vk.9, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        next
                          case c_Get_Masterpkey
                          step( solve( !KU( ~Masterskey ) @ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !KU( 'b' ) @ #vk.10 ) )
                              case coerce
                              step( solve( !KD( 'b' ) ▶₀ #vk.10 ) )
                                case Attacker_Get_Masterskey
                                step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.12 ) )
                                  case Setup
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_Get_Usersey
                                step( solve( !UserID( Masterpkey, t, $User.1, ~ID.3 ) ▶₀ #vr.12 ) )
                                  case Create_Id
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_make_ciphertxt
                                by step( contradiction /* impossible chain */ )
                              next
                                case Dec_Oracle
                                by step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                              next
                                case Encrypt_Attacker
                                by step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                              next
                                case Sender_encrypt
                                step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_fst
                                  step( solve( (#vr.13, 0) ~~> (#vk.10, 0) ) )
                                    case d_0_dec
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( (#vr.13, 0) ~~> (#vk.10, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.14, 0) ~~> (#vk.10, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.14, 0) ~~> (#vk.10, 0) ) )
                                      case d_0_verify
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              next
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case pub
                              MIRRORED
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_KGCskey
                    step( solve( !KU( ~Masterskey ) @ #vk.8 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.7 ) )
                        case Sender_encrypt
                        step( solve( !KU( 'a' ) @ #vk.8 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.8 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.14 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.2, ~ID.3 ) ▶₀ #vr.14 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.15, 0) ~~> (#vk.8, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.15, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.16, 0) ~~> (#vk.8, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.16, 0) ~~> (#vk.8, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( 'b' ) @ #vk.9 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.9 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.14 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.2, ~ID.3 ) ▶₀ #vr.14 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.15, 0) ~~> (#vk.9, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.15, 0) ~~> (#vk.9, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.16, 0) ~~> (#vk.9, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.16, 0) ~~> (#vk.9, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        qed
                      next
                        case c_KGCpkey
                        step( solve( !KU( 'a' ) @ #vk.8 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.8 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.10 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.12, 0) ~~> (#vk.8, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.12, 0) ~~> (#vk.8, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( 'b' ) @ #vk.9 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.9 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.10 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.11, 0) ~~> (#vk.9, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk.9, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.12, 0) ~~> (#vk.9, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk.9, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.10 ) )
                              case Setup
                              MIRRORED
                            next
                              case c_Get_Masterpkey
                              MIRRORED
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case c_KGCskey
                  step( solve( !KU( ~Masterskey ) @ #vk.8 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.8 ) )
                      case Attacker_Get_Usersey
                      step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.7 ) )
                        case Sender_encrypt
                        step( solve( !KU( 'a' ) @ #vk.8 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.8 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.14 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.2, ~ID.3 ) ▶₀ #vr.14 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.15, 0) ~~> (#vk.8, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.15, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.16, 0) ~~> (#vk.8, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.16, 0) ~~> (#vk.8, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          MIRRORED
                        qed
                      next
                        case c_KGCpkey
                        step( solve( !KU( 'a' ) @ #vk.8 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.8 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.10 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.12, 0) ~~> (#vk.8, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.12, 0) ~~> (#vk.8, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.9 ) )
                            case Setup
                            step( solve( !KU( 'b' ) @ #vk.10 ) )
                              case coerce
                              step( solve( !KD( 'b' ) ▶₀ #vk.10 ) )
                                case Attacker_Get_Masterskey
                                step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                                  case Setup
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_Get_Usersey
                                step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.11 ) )
                                  case Create_Id
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_make_ciphertxt
                                by step( contradiction /* impossible chain */ )
                              next
                                case Dec_Oracle
                                by step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                              next
                                case Encrypt_Attacker
                                by step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                              next
                                case Sender_encrypt
                                step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_fst
                                  step( solve( (#vr.12, 0) ~~> (#vk.10, 0) ) )
                                    case d_0_dec
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk.10, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.13, 0) ~~> (#vk.10, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk.10, 0) ) )
                                      case d_0_verify
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              next
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case pub
                              MIRRORED
                            qed
                          next
                            case c_Get_Masterpkey
                            step( solve( !KU( 'b' ) @ #vk.10 ) )
                              case coerce
                              step( solve( !KD( 'b' ) ▶₀ #vk.10 ) )
                                case Attacker_Get_Masterskey
                                step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                                  case Setup
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_Get_Usersey
                                step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.10 ) )
                                  case Create_Id
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_make_ciphertxt
                                by step( contradiction /* impossible chain */ )
                              next
                                case Dec_Oracle
                                by step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                              next
                                case Encrypt_Attacker
                                by step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                              next
                                case Sender_encrypt
                                step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_fst
                                  step( solve( (#vr.11, 0) ~~> (#vk.10, 0) ) )
                                    case d_0_dec
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( (#vr.11, 0) ~~> (#vk.10, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.12, 0) ~~> (#vk.10, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.12, 0) ~~> (#vk.10, 0) ) )
                                      case d_0_verify
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              next
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case pub
                              MIRRORED
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_KGCskey
                      step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.7 ) )
                        case Sender_encrypt
                        step( solve( !KU( 'a' ) @ #vk.8 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.8 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.12 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.12 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.13, 0) ~~> (#vk.8, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.13, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.14, 0) ~~> (#vk.8, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.14, 0) ~~> (#vk.8, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( 'b' ) @ #vk.9 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.9 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.12 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.12 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.13, 0) ~~> (#vk.9, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.13, 0) ~~> (#vk.9, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.14, 0) ~~> (#vk.9, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.14, 0) ~~> (#vk.9, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        qed
                      next
                        case c_KGCpkey
                        step( solve( !KU( 'a' ) @ #vk.8 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.8 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.8 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.8 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.9, 0) ~~> (#vk.8, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.9, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.10, 0) ~~> (#vk.8, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.10, 0) ~~> (#vk.8, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( 'b' ) @ #vk.9 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.9 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.8 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.8 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.2, 0) ~~> (#vk.9, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.2, 0) ~~> (#vk.9, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.2, 0) ~~> (#vk.9, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.9, 0) ~~> (#vk.9, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#vk.9, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.10, 0) ~~> (#vk.9, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#vk.9, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.10 ) )
                              case Setup
                              MIRRORED
                            next
                              case c_Get_Masterpkey
                              MIRRORED
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case pair
        step( solve( !UserID( Masterpkey, Userskey, 'a', ~ID ) ▶₂ #vr ) )
          case Create_Id
          step( solve( !KU( sign(<~nonce, 'a'>, KGCskey(~Masterskey, 'a'))
                       ) @ #vk.4 ) )
            case Sender_encrypt
            step( solve( !KU( enc(<~nonce, 'a'>,
                                  KGCpkey(Get_Masterpkey(~Masterskey), 'b'))
                         ) @ #vk.3 ) )
              case Sender_encrypt
              step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.4 ) )
                case Sender_encrypt
                MIRRORED
              next
                case c_KGCpkey
                step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.5 ) )
                  case Setup
                  step( solve( !KU( 'b' ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( 'b' ) ▶₀ #vk.6 ) )
                      case Attacker_Get_Masterskey
                      step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.7 ) )
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_Get_Usersey
                      step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.7 ) )
                        case Create_Id
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Attacker_make_ciphertxt
                      by step( contradiction /* impossible chain */ )
                    next
                      case Dec_Oracle
                      by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                    next
                      case Encrypt_Attacker
                      by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                    next
                      case Sender_encrypt
                      step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                          case d_0_dec
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.9, 0) ~~> (#vk.6, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.9, 0) ~~> (#vk.6, 0) ) )
                            case d_0_verify
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Setup
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                next
                  case c_Get_Masterpkey
                  step( solve( !KU( ~Masterskey ) @ #vk.7 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !KU( 'b' ) @ #vk.7 ) )
                      case coerce
                      step( solve( !KD( 'b' ) ▶₀ #vk.7 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.7 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.7 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                      next
                        case Encrypt_Attacker
                        by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk.7, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk.7, 0) ) )
                              case d_0_verify
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                qed
              qed
            next
              case c_enc
              step( solve( !KU( ~nonce ) @ #vk.6 ) )
                case Sender_encrypt
                step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.8 ) )
                  case Attacker_Get_Usersey
                  step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.7 ) )
                    case Sender_encrypt
                    step( solve( !KU( 'a' ) @ #vk.8 ) )
                      case coerce
                      step( solve( !KD( 'a' ) ▶₀ #vk.8 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.14 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.2, ~ID.3 ) ▶₀ #vr.14 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( contradiction /* cyclic */ )
                      next
                        case Encrypt_Attacker
                        by step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.3, 0) ~~> (#vk.8, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.15, 0) ~~> (#vk.8, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.15, 0) ~~> (#vk.8, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.16, 0) ~~> (#vk.8, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.16, 0) ~~> (#vk.8, 0) ) )
                              case d_0_verify
                              by step( contradiction /* cyclic */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  next
                    case c_KGCpkey
                    step( solve( !KU( 'a' ) @ #vk.8 ) )
                      case coerce
                      step( solve( !KD( 'a' ) ▶₀ #vk.8 ) )
                        case Attacker_Get_Masterskey
                        step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_Get_Usersey
                        step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.10 ) )
                          case Create_Id
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Attacker_make_ciphertxt
                        by step( contradiction /* impossible chain */ )
                      next
                        case Dec_Oracle
                        by step( contradiction /* cyclic */ )
                      next
                        case Encrypt_Attacker
                        by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                      next
                        case Sender_encrypt
                        step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                            case d_0_dec
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.11, 0) ~~> (#vk.8, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.12, 0) ~~> (#vk.8, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.12, 0) ~~> (#vk.8, 0) ) )
                              case d_0_verify
                              by step( contradiction /* cyclic */ )
                            qed
                          qed
                        qed
                      next
                        case Setup
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.9 ) )
                        case Setup
                        step( solve( !KU( 'b' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'b' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.11 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.12, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.12, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.13, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.13, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          MIRRORED
                        qed
                      next
                        case c_Get_Masterpkey
                        step( solve( !KU( ~Masterskey ) @ #vk.11 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !KU( 'b' ) @ #vk.11 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.11 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.11 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.12, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.12, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.13, 0) ~~> (#vk.11, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.13, 0) ~~> (#vk.11, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case c_KGCskey
                  step( solve( !KU( ~Masterskey ) @ #vk.9 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.8 ) )
                      case Sender_encrypt
                      step( solve( !KU( 'a' ) @ #vk.9 ) )
                        case coerce
                        step( solve( !KD( 'a' ) ▶₀ #vk.9 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.13 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.13 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( contradiction /* cyclic */ )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.14, 0) ~~> (#vk.9, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.14, 0) ~~> (#vk.9, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.15, 0) ~~> (#vk.9, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.15, 0) ~~> (#vk.9, 0) ) )
                                case d_0_verify
                                by step( contradiction /* cyclic */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        step( solve( !KU( 'b' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'b' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.13 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.13 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.14, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.14, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.15, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.15, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          MIRRORED
                        qed
                      qed
                    next
                      case c_KGCpkey
                      step( solve( !KU( 'a' ) @ #vk.9 ) )
                        case coerce
                        step( solve( !KD( 'a' ) ▶₀ #vk.9 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.9 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( contradiction /* cyclic */ )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.2, 0) ~~> (#vk.9, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.2, 0) ~~> (#vk.9, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.10, 0) ~~> (#vk.9, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.10, 0) ~~> (#vk.9, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.11, 0) ~~> (#vk.9, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.11, 0) ~~> (#vk.9, 0) ) )
                                case d_0_verify
                                by step( contradiction /* cyclic */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        step( solve( !KU( 'b' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'b' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.9 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( solve( (#vl.2, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.2, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.2, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.10, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.11, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.11 ) )
                            case Setup
                            MIRRORED
                          next
                            case c_Get_Masterpkey
                            MIRRORED
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case c_sign
            step( solve( !KU( ~nonce ) @ #vk.7 ) )
              case Sender_encrypt
              step( solve( !KU( KGCskey(~Masterskey, 'a') ) @ #vk.7 ) )
                case Attacker_Get_Usersey
                step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.9 ) )
                  case Attacker_Get_Usersey
                  step( solve( !KU( enc(<~nonce, 'a'>,
                                        KGCpkey(Get_Masterpkey(~Masterskey), 'b'))
                               ) @ #vk.7 ) )
                    case Sender_encrypt
                    step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.8 ) )
                      case Sender_encrypt
                      step( solve( !KU( 'a' ) @ #vk.9 ) )
                        case coerce
                        step( solve( !KD( 'a' ) ▶₀ #vk.9 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.15 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.2, ~ID.4 ) ▶₀ #vr.15 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( contradiction /* cyclic */ )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.16, 0) ~~> (#vk.9, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.16, 0) ~~> (#vk.9, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.17, 0) ~~> (#vk.9, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.17, 0) ~~> (#vk.9, 0) ) )
                                case d_0_verify
                                by step( contradiction /* cyclic */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        MIRRORED
                      qed
                    next
                      case c_KGCpkey
                      step( solve( !KU( 'a' ) @ #vk.9 ) )
                        case coerce
                        step( solve( !KD( 'a' ) ▶₀ #vk.9 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.1, ~ID.3 ) ▶₀ #vr.11 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( contradiction /* cyclic */ )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.12, 0) ~~> (#vk.9, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.12, 0) ~~> (#vk.9, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.13, 0) ~~> (#vk.9, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.13, 0) ~~> (#vk.9, 0) ) )
                                case d_0_verify
                                by step( contradiction /* cyclic */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.10 ) )
                          case Setup
                          step( solve( !KU( 'b' ) @ #vk.11 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.11 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.12 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.3 ) ▶₀ #vr.12 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.4, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.4, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.4, 0) ~~> (#vk.11, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.13, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.13, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.14, 0) ~~> (#vk.11, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.14, 0) ~~> (#vk.11, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        next
                          case c_Get_Masterpkey
                          step( solve( !KU( ~Masterskey ) @ #vk.12 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !KU( 'b' ) @ #vk.12 ) )
                              case coerce
                              step( solve( !KD( 'b' ) ▶₀ #vk.12 ) )
                                case Attacker_Get_Masterskey
                                step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.12 ) )
                                  case Setup
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_Get_Usersey
                                step( solve( !UserID( Masterpkey, t, $User.1, ~ID.3 ) ▶₀ #vr.12 ) )
                                  case Create_Id
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_make_ciphertxt
                                by step( contradiction /* impossible chain */ )
                              next
                                case Dec_Oracle
                                by step( solve( (#vl.4, 0) ~~> (#vk.12, 0) ) )
                              next
                                case Encrypt_Attacker
                                by step( solve( (#vl.4, 0) ~~> (#vk.12, 0) ) )
                              next
                                case Sender_encrypt
                                step( solve( (#vl.4, 0) ~~> (#vk.12, 0) ) )
                                  case d_0_fst
                                  step( solve( (#vr.13, 0) ~~> (#vk.12, 0) ) )
                                    case d_0_dec
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( (#vr.13, 0) ~~> (#vk.12, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.14, 0) ~~> (#vk.12, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.14, 0) ~~> (#vk.12, 0) ) )
                                      case d_0_verify
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              next
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case pub
                              MIRRORED
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_enc
                    step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.8 ) )
                      case Sender_encrypt
                      step( solve( !KU( 'a' ) @ #vk.9 ) )
                        case coerce
                        step( solve( !KD( 'a' ) ▶₀ #vk.9 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.14 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.2, ~ID.4 ) ▶₀ #vr.14 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( contradiction /* cyclic */ )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.15, 0) ~~> (#vk.9, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.15, 0) ~~> (#vk.9, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.16, 0) ~~> (#vk.9, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.16, 0) ~~> (#vk.9, 0) ) )
                                case d_0_verify
                                by step( contradiction /* cyclic */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        MIRRORED
                      qed
                    next
                      case c_KGCpkey
                      step( solve( !KU( 'a' ) @ #vk.9 ) )
                        case coerce
                        step( solve( !KD( 'a' ) ▶₀ #vk.9 ) )
                          case Attacker_Get_Masterskey
                          step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_Get_Usersey
                          step( solve( !UserID( Masterpkey, t, $User.1, ~ID.3 ) ▶₀ #vr.10 ) )
                            case Create_Id
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Attacker_make_ciphertxt
                          by step( contradiction /* impossible chain */ )
                        next
                          case Dec_Oracle
                          by step( contradiction /* cyclic */ )
                        next
                          case Encrypt_Attacker
                          by step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                        next
                          case Sender_encrypt
                          step( solve( (#vl.3, 0) ~~> (#vk.9, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.11, 0) ~~> (#vk.9, 0) ) )
                              case d_0_dec
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.11, 0) ~~> (#vk.9, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.12, 0) ~~> (#vk.9, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.12, 0) ~~> (#vk.9, 0) ) )
                                case d_0_verify
                                by step( contradiction /* cyclic */ )
                              qed
                            qed
                          qed
                        next
                          case Setup
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case pub
                        step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.10 ) )
                          case Setup
                          step( solve( !KU( 'b' ) @ #vk.11 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.11 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.3 ) ▶₀ #vr.11 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.4, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.4, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.4, 0) ~~> (#vk.11, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.12, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.12, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.13, 0) ~~> (#vk.11, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.13, 0) ~~> (#vk.11, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        next
                          case c_Get_Masterpkey
                          step( solve( !KU( ~Masterskey ) @ #vk.12 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !KU( 'b' ) @ #vk.12 ) )
                              case coerce
                              step( solve( !KD( 'b' ) ▶₀ #vk.12 ) )
                                case Attacker_Get_Masterskey
                                step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                                  case Setup
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_Get_Usersey
                                step( solve( !UserID( Masterpkey, t, $User.1, ~ID.3 ) ▶₀ #vr.11 ) )
                                  case Create_Id
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_make_ciphertxt
                                by step( contradiction /* impossible chain */ )
                              next
                                case Dec_Oracle
                                by step( solve( (#vl.4, 0) ~~> (#vk.12, 0) ) )
                              next
                                case Encrypt_Attacker
                                by step( solve( (#vl.4, 0) ~~> (#vk.12, 0) ) )
                              next
                                case Sender_encrypt
                                step( solve( (#vl.4, 0) ~~> (#vk.12, 0) ) )
                                  case d_0_fst
                                  step( solve( (#vr.12, 0) ~~> (#vk.12, 0) ) )
                                    case d_0_dec
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk.12, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.13, 0) ~~> (#vk.12, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk.12, 0) ) )
                                      case d_0_verify
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              next
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case pub
                              MIRRORED
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case c_KGCskey
                  step( solve( !KU( ~Masterskey ) @ #vk.10 ) )
                    case Attacker_Get_Masterskey
                    step( solve( !KU( enc(<~nonce, 'a'>,
                                          KGCpkey(Get_Masterpkey(~Masterskey), 'b'))
                                 ) @ #vk.8 ) )
                      case Sender_encrypt
                      step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.9 ) )
                        case Sender_encrypt
                        step( solve( !KU( 'a' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.14 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.2, ~ID.3 ) ▶₀ #vr.14 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.15, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.15, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.16, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.16, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( 'b' ) @ #vk.11 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.11 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.14 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.2, ~ID.3 ) ▶₀ #vr.14 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.4, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.4, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.4, 0) ~~> (#vk.11, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.15, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.15, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.16, 0) ~~> (#vk.11, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.16, 0) ~~> (#vk.11, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        qed
                      next
                        case c_KGCpkey
                        step( solve( !KU( 'a' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.10 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.11, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.11, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.12, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.12, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( 'b' ) @ #vk.11 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.11 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.10 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.11, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.12, 0) ~~> (#vk.11, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk.11, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.12 ) )
                              case Setup
                              MIRRORED
                            next
                              case c_Get_Masterpkey
                              MIRRORED
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_enc
                      step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.9 ) )
                        case Sender_encrypt
                        step( solve( !KU( 'a' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.13 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.2, ~ID.3 ) ▶₀ #vr.13 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.14, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.14, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.15, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.15, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( 'b' ) @ #vk.11 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.11 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.13 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.2, ~ID.3 ) ▶₀ #vr.13 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.4, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.4, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.4, 0) ~~> (#vk.11, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.14, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.14, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.15, 0) ~~> (#vk.11, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.15, 0) ~~> (#vk.11, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        qed
                      next
                        case c_KGCpkey
                        step( solve( !KU( 'a' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.9 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.10, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.11, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( 'b' ) @ #vk.11 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.11 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.9 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.10, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.10, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.11, 0) ~~> (#vk.11, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.11, 0) ~~> (#vk.11, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.12 ) )
                              case Setup
                              MIRRORED
                            next
                              case c_Get_Masterpkey
                              MIRRORED
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_KGCskey
                step( solve( !KU( ~Masterskey ) @ #vk.10 ) )
                  case Attacker_Get_Masterskey
                  step( solve( !KU( KGCskey(~Masterskey, 'b') ) @ #vk.10 ) )
                    case Attacker_Get_Usersey
                    step( solve( !KU( enc(<~nonce, 'a'>,
                                          KGCpkey(Get_Masterpkey(~Masterskey), 'b'))
                                 ) @ #vk.8 ) )
                      case Sender_encrypt
                      step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.9 ) )
                        case Sender_encrypt
                        step( solve( !KU( 'a' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.14 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.2, ~ID.3 ) ▶₀ #vr.14 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.15, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.15, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.16, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.16, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          MIRRORED
                        qed
                      next
                        case c_KGCpkey
                        step( solve( !KU( 'a' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.10 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.11, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.11, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.12, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.12, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.11 ) )
                            case Setup
                            step( solve( !KU( 'b' ) @ #vk.12 ) )
                              case coerce
                              step( solve( !KD( 'b' ) ▶₀ #vk.12 ) )
                                case Attacker_Get_Masterskey
                                step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                                  case Setup
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_Get_Usersey
                                step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.11 ) )
                                  case Create_Id
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_make_ciphertxt
                                by step( contradiction /* impossible chain */ )
                              next
                                case Dec_Oracle
                                by step( solve( (#vl.4, 0) ~~> (#vk.12, 0) ) )
                              next
                                case Encrypt_Attacker
                                by step( solve( (#vl.4, 0) ~~> (#vk.12, 0) ) )
                              next
                                case Sender_encrypt
                                step( solve( (#vl.4, 0) ~~> (#vk.12, 0) ) )
                                  case d_0_fst
                                  step( solve( (#vr.12, 0) ~~> (#vk.12, 0) ) )
                                    case d_0_dec
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk.12, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.13, 0) ~~> (#vk.12, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk.12, 0) ) )
                                      case d_0_verify
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              next
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case pub
                              MIRRORED
                            qed
                          next
                            case c_Get_Masterpkey
                            step( solve( !KU( 'b' ) @ #vk.12 ) )
                              case coerce
                              step( solve( !KD( 'b' ) ▶₀ #vk.12 ) )
                                case Attacker_Get_Masterskey
                                step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                                  case Setup
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_Get_Usersey
                                step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.10 ) )
                                  case Create_Id
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_make_ciphertxt
                                by step( contradiction /* impossible chain */ )
                              next
                                case Dec_Oracle
                                by step( solve( (#vl.3, 0) ~~> (#vk.12, 0) ) )
                              next
                                case Encrypt_Attacker
                                by step( solve( (#vl.3, 0) ~~> (#vk.12, 0) ) )
                              next
                                case Sender_encrypt
                                step( solve( (#vl.3, 0) ~~> (#vk.12, 0) ) )
                                  case d_0_fst
                                  step( solve( (#vr.11, 0) ~~> (#vk.12, 0) ) )
                                    case d_0_dec
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( (#vr.11, 0) ~~> (#vk.12, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.12, 0) ~~> (#vk.12, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.12, 0) ~~> (#vk.12, 0) ) )
                                      case d_0_verify
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              next
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case pub
                              MIRRORED
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_enc
                      step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.9 ) )
                        case Sender_encrypt
                        step( solve( !KU( 'a' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.13 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.2, ~ID.3 ) ▶₀ #vr.13 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.14, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.14, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.15, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.15, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          MIRRORED
                        qed
                      next
                        case c_KGCpkey
                        step( solve( !KU( 'a' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.9 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.10, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.11, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.11 ) )
                            case Setup
                            step( solve( !KU( 'b' ) @ #vk.12 ) )
                              case coerce
                              step( solve( !KD( 'b' ) ▶₀ #vk.12 ) )
                                case Attacker_Get_Masterskey
                                step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.10 ) )
                                  case Setup
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_Get_Usersey
                                step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.10 ) )
                                  case Create_Id
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_make_ciphertxt
                                by step( contradiction /* impossible chain */ )
                              next
                                case Dec_Oracle
                                by step( solve( (#vl.4, 0) ~~> (#vk.12, 0) ) )
                              next
                                case Encrypt_Attacker
                                by step( solve( (#vl.4, 0) ~~> (#vk.12, 0) ) )
                              next
                                case Sender_encrypt
                                step( solve( (#vl.4, 0) ~~> (#vk.12, 0) ) )
                                  case d_0_fst
                                  step( solve( (#vr.11, 0) ~~> (#vk.12, 0) ) )
                                    case d_0_dec
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( (#vr.11, 0) ~~> (#vk.12, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.12, 0) ~~> (#vk.12, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.12, 0) ~~> (#vk.12, 0) ) )
                                      case d_0_verify
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              next
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case pub
                              MIRRORED
                            qed
                          next
                            case c_Get_Masterpkey
                            step( solve( !KU( 'b' ) @ #vk.12 ) )
                              case coerce
                              step( solve( !KD( 'b' ) ▶₀ #vk.12 ) )
                                case Attacker_Get_Masterskey
                                step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.9 ) )
                                  case Setup
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_Get_Usersey
                                step( solve( !UserID( Masterpkey, t, $User.1, ~ID.2 ) ▶₀ #vr.9 ) )
                                  case Create_Id
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Attacker_make_ciphertxt
                                by step( contradiction /* impossible chain */ )
                              next
                                case Dec_Oracle
                                by step( solve( (#vl.3, 0) ~~> (#vk.12, 0) ) )
                              next
                                case Encrypt_Attacker
                                by step( solve( (#vl.3, 0) ~~> (#vk.12, 0) ) )
                              next
                                case Sender_encrypt
                                step( solve( (#vl.3, 0) ~~> (#vk.12, 0) ) )
                                  case d_0_fst
                                  step( solve( (#vr.10, 0) ~~> (#vk.12, 0) ) )
                                    case d_0_dec
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#vk.12, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.11, 0) ~~> (#vk.12, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.11, 0) ~~> (#vk.12, 0) ) )
                                      case d_0_verify
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              next
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case pub
                              MIRRORED
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_KGCskey
                    step( solve( !KU( enc(<~nonce, 'a'>,
                                          KGCpkey(Get_Masterpkey(~Masterskey), 'b'))
                                 ) @ #vk.8 ) )
                      case Sender_encrypt
                      step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.9 ) )
                        case Sender_encrypt
                        step( solve( !KU( 'a' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.12 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.12 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.13, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.13, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.14, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.14, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( 'b' ) @ #vk.11 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.11 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.12 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.12 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.13, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.13, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.14, 0) ~~> (#vk.11, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.14, 0) ~~> (#vk.11, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        qed
                      next
                        case c_KGCpkey
                        step( solve( !KU( 'a' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.8 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.8 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.2, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.2, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.9, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.9, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.10, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.10, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( 'b' ) @ #vk.11 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.11 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.8 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.8 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.2, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.2, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.2, 0) ~~> (#vk.11, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.9, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.10, 0) ~~> (#vk.11, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#vk.11, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.12 ) )
                              case Setup
                              MIRRORED
                            next
                              case c_Get_Masterpkey
                              MIRRORED
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_enc
                      step( solve( !KU( KGCpkey(Get_Masterpkey(~Masterskey), 'b') ) @ #vk.9 ) )
                        case Sender_encrypt
                        step( solve( !KU( 'a' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.11 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.3, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.12, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.12, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.13, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.13, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( 'b' ) @ #vk.11 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.11 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.11 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.2, ~ID.2 ) ▶₀ #vr.11 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.3, 0) ~~> (#vk.11, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.12, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.12, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.13, 0) ~~> (#vk.11, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.13, 0) ~~> (#vk.11, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        qed
                      next
                        case c_KGCpkey
                        step( solve( !KU( 'a' ) @ #vk.10 ) )
                          case coerce
                          step( solve( !KD( 'a' ) ▶₀ #vk.10 ) )
                            case Attacker_Get_Masterskey
                            step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.7 ) )
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_Get_Usersey
                            step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.7 ) )
                              case Create_Id
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Attacker_make_ciphertxt
                            by step( contradiction /* impossible chain */ )
                          next
                            case Dec_Oracle
                            by step( contradiction /* cyclic */ )
                          next
                            case Encrypt_Attacker
                            by step( solve( (#vl.2, 0) ~~> (#vk.10, 0) ) )
                          next
                            case Sender_encrypt
                            step( solve( (#vl.2, 0) ~~> (#vk.10, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.8, 0) ~~> (#vk.10, 0) ) )
                                case d_0_dec
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.8, 0) ~~> (#vk.10, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.9, 0) ~~> (#vk.10, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#vk.10, 0) ) )
                                  case d_0_verify
                                  by step( contradiction /* cyclic */ )
                                qed
                              qed
                            qed
                          next
                            case Setup
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case pub
                          step( solve( !KU( 'b' ) @ #vk.11 ) )
                            case coerce
                            step( solve( !KD( 'b' ) ▶₀ #vk.11 ) )
                              case Attacker_Get_Masterskey
                              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.7 ) )
                                case Setup
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_Get_Usersey
                              step( solve( !UserID( Masterpkey, t, $User.1, ~ID.1 ) ▶₀ #vr.7 ) )
                                case Create_Id
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Attacker_make_ciphertxt
                              by step( contradiction /* impossible chain */ )
                            next
                              case Dec_Oracle
                              by step( solve( (#vl.2, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Encrypt_Attacker
                              by step( solve( (#vl.2, 0) ~~> (#vk.11, 0) ) )
                            next
                              case Sender_encrypt
                              step( solve( (#vl.2, 0) ~~> (#vk.11, 0) ) )
                                case d_0_fst
                                step( solve( (#vr.8, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_dec
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.8, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.9, 0) ~~> (#vk.11, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.9, 0) ~~> (#vk.11, 0) ) )
                                    case d_0_verify
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Setup
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case pub
                            step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.12 ) )
                              case Setup
                              MIRRORED
                            next
                              case c_Get_Masterpkey
                              MIRRORED
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Setup
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_fst
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case Get_Masterpkey
          step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk ) )
            case Setup
            MIRRORED
          next
            case c_Get_Masterpkey
            step( solve( !KU( ~Masterskey ) @ #vk.1 ) )
              case Attacker_Get_Masterskey
              MIRRORED
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case Const_pub_KGC
          step( solve( !KU( 'KGC' ) @ #vk ) )
            case coerce
            step( solve( !KD( 'KGC' ) ▶₀ #vk ) )
              case Attacker_Get_Masterskey
              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.2 ) )
                case Setup
                by step( contradiction /* impossible chain */ )
              qed
            next
              case Attacker_Get_Usersey
              step( solve( !UserID( Masterpkey, t, $User, ~ID ) ▶₀ #vr.2 ) )
                case Create_Id
                by step( contradiction /* impossible chain */ )
              qed
            next
              case Attacker_make_ciphertxt
              by step( contradiction /* impossible chain */ )
            next
              case Dec_Oracle
              by step( contradiction /* cyclic */ )
            next
              case Encrypt_Attacker
              by step( contradiction /* cyclic */ )
            next
              case Sender_encrypt
              step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                case d_0_fst
                step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                  case d_0_dec
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_verify
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              qed
            next
              case Setup
              by step( contradiction /* impossible chain */ )
            qed
          next
            case pub
            MIRRORED
          qed
        qed
      next
        case pair
        step( solve( !KU( Get_Masterpkey(~Masterskey) ) @ #vk.1 ) )
          case Setup
          step( solve( !KU( 'KGC' ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( 'KGC' ) ▶₀ #vk.2 ) )
              case Attacker_Get_Masterskey
              step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.2 ) )
                case Setup
                by step( contradiction /* impossible chain */ )
              qed
            next
              case Attacker_Get_Usersey
              step( solve( !UserID( Masterpkey, t, $User, ~ID ) ▶₀ #vr.2 ) )
                case Create_Id
                by step( contradiction /* impossible chain */ )
              qed
            next
              case Attacker_make_ciphertxt
              by step( contradiction /* impossible chain */ )
            next
              case Dec_Oracle
              by step( contradiction /* cyclic */ )
            next
              case Encrypt_Attacker
              by step( contradiction /* cyclic */ )
            next
              case Sender_encrypt
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
                  case d_0_dec
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                    case d_0_verify
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              qed
            next
              case Setup
              by step( contradiction /* impossible chain */ )
            qed
          next
            case pub
            MIRRORED
          qed
        next
          case c_Get_Masterpkey
          step( solve( !KU( ~Masterskey ) @ #vk.3 ) )
            case Attacker_Get_Masterskey
            step( solve( !KU( 'KGC' ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( 'KGC' ) ▶₀ #vk.3 ) )
                case Attacker_Get_Masterskey
                step( solve( !Make_Masterskey( t, 'KGC' ) ▶₀ #vr.2 ) )
                  case Setup
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case Attacker_Get_Usersey
                step( solve( !UserID( Masterpkey, t, $User, ~ID ) ▶₀ #vr.2 ) )
                  case Create_Id
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case Attacker_make_ciphertxt
                by step( contradiction /* impossible chain */ )
              next
                case Dec_Oracle
                by step( contradiction /* cyclic */ )
              next
                case Encrypt_Attacker
                by step( contradiction /* cyclic */ )
              next
                case Sender_encrypt
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
                    case d_0_dec
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                      case d_0_verify
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                qed
              next
                case Setup
                by step( contradiction /* impossible chain */ )
              qed
            next
              case pub
              MIRRORED
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Send
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_Sender_encrypt
  backward-search
    case LHS
    step( simplify )
    step( solve( !UserID( Masterpkey, Userskey, 'a', ~ID ) ▶₂ #i ) )
      case Create_Id
      MIRRORED
    qed
  next
    case RHS
    step( simplify )
    step( solve( !UserID( Masterpkey, Userskey, 'a', ~ID ) ▶₂ #i ) )
      case Create_Id
      MIRRORED
    qed
  qed
next
  case Rule_Setup
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
qed

/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.10.0
Maude version 2.7.1
Git revision: UNKNOWN, branch: UNKNOWN
Compiled at: 2024-10-30 14:56:23.355649243 UTC
*/

end

==============================================================================
summary of summaries:

analyzed: No14-IBE-CHK(code6)_IND_20250711.spthy

  processing time: 28.34s
  
  RHS :  check_aliveness (all-traces): verified (2 steps)
  LHS :  check_aliveness (all-traces): verified (2 steps)
  RHS :  check_noninjective_agreement (all-traces): verified (2 steps)
  LHS :  check_noninjective_agreement (all-traces): verified (2 steps)
  RHS :  check_injective_agreement (all-traces): verified (2 steps)
  LHS :  check_injective_agreement (all-traces): verified (2 steps)
  RHS :  nonce_secrecy (all-traces): verified (11 steps)
  LHS :  nonce_secrecy (all-traces): verified (11 steps)
  RHS :  ow_value_notequal (all-traces): verified (4 steps)
  LHS :  ow_value_notequal (all-traces): verified (4 steps)
  RHS :  ow_m_secret (all-traces): verified (2 steps)
  LHS :  ow_m_secret (all-traces): verified (2 steps)
  RHS :  unforgeability (all-traces): verified (2 steps)
  LHS :  unforgeability (all-traces): verified (2 steps)
  DiffLemma:  Observational_equivalence : verified (5422 steps)

==============================================================================
