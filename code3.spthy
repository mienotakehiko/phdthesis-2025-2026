//  (* Code.3: IND-CCA for TAMF-03 model *)
theory IND_CCA_asymmetric_encryption_TMAF03
begin
builtins: asymmetric-encryption

rule Setup:
[Fr(~key)] --[OnlyOnce(), Setup(~key)]-> [!Sk($A, ~key), !Pk($A, pk(~key))]

rule Get_pk:
[!Pk(S, publickey)] -->[Out(publickey)]

rule attackerkey:
[!Sk($A, key)] --[Oracle($A)]-> [Out(key)]

rule Attacker_make_ciphertxt:
[Fr(m_), Fr(~key)] --[Oracle($A)]-> [ Out(aenc(<$A, m_>, pk(~key))), St_Oracle(aenc(<$A, m_>, pk(~key)))]

rule Sender_encrypt:
[ Fr(~m), !Pk($A, ~key)] --[Send($B, aenc(<$B, ~m>, ~key)), Secret(~m), Sender($B), Oracle($A), Role('Sender'), Sender_send_ciphertext($B, aenc(<$B, ~m>, ~key))]-> [Out(aenc(<$B, ~m>, ~key)), St_ReceiveKey(aenc(<$B, ~m>, pk(~key)))]

rule Encrypt_Attacker:
[!Pk($A, ~key), In(<$A, m_>), St_Oracle(m_)]
 --[Send($B, aenc(<$A, m_>, ~key)), Secret(m_), Oracle($A), Sender($B), Role('Oracle'), Attacker_send_ciphertext(aenc(<$A, m_>, ~key))]->
 [Out(aenc(<$A, m_>, ~key)), St_ReceiveKey_Oracle_ciphertext(aenc(<$A, m_>, pk(~key)))]

rule Dec_Oracle:
[Fr(~key), In(aenc(<$A, m_>, pk(~key))), St_Oracle(aenc(<$A, m_>, pk(~key))), In(<$A, ca>), In(<$B, cb>), Fr(r)]
--[Send($A, aenc(<$A, m_>, pk(~key))), Secret(m_), Oracle($A), Sender($B), Role('Oracle'), Oracle_receive_ciphertext(aenc(<$A, m_>, pk(~key)))]-> [Out(adec(<diff(<$A, ca>, <$B, cb>), r>, ~key)), St_ReceiveKey_Oracle_ciphertext(aenc(<$A, m_>, pk(~key)))]

rule Decrypt_Attacker:
let
m1 = adec(aenc(<$A, m_>, pk(~key)), ~key)
m2 = adec(aenc(<$B, ~m>, pk(~key)), ~key)
in
[St_ReceiveKey_Oracle_ciphertext(aenc(<$A, m_>, pk(~key))), In(adec(aenc(<$A, m_>, pk(~key)), ~key)), St_ReceiveKey(aenc(<$B, ~m>, pk(~key))), In(aenc(<$B, ~m>, pk(~key))), Fr(~key)] --[Notequalvalue(<m1, m2>), Secretmessage(m2)]-> [ ]

restriction OnlyOnce:
"All #i #j. OnlyOnce() @ i & OnlyOnce() @ j==> #i = #j"

//restriction choice_ciphertext:
// "All x #i. Attacker_send_ciphertext(x)@i
//   ==> (Ex y #j. Attacker_send_ciphertext(y)@j & #j < #i) | (Ex y #j. Sender_send_ciphertext(y)@j & #j < #i)"

lemma ow_value_notequal:
 "All #i #j x. Notequalvalue(x)@i & Notequalvalue(x)@j ==> #i=#j"


lemma secret_sender_message:
  all-traces
    "All n #i. Secret(n) @i & Role('Sender') @i ==> (not (Ex #j. K(n)@j)) | (Ex B #j. Oracle(B)@j & Sender(B)@i)"

lemma ow_m_secret:
 "All m #i. Secretmessage(m)@i ==> not (Ex #j. K(m)@j)"

end
