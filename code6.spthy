  (* Code.6: IBE_CHK_formalization *)
theory IBE_CHK_formalization
begin

functions: Make_Masterskey/2,Get_Masterpkey/1,KGCskey/2,KGCpkey/2,UserID/4,enc/2,dec/2,sign/2,verify/3,true/0
equations: verify(sign(message,KGCskey(Masterskey, User)), message, KGCpkey(Get_Masterpkey(Masterskey),User)) = true
equations: dec(enc(message,KGCpkey(Get_Masterpkey(Masterskey),User)),KGCskey(Masterskey,User)) = message

rule Setup:
  [Fr(~Masterskey)] --[OnlyOnce()]-> [!Make_Masterskey(~Masterskey, 'KGC'), Out(<Get_Masterpkey(~Masterskey), 'KGC'>)]

rule Create_Id:
  let
  Masterpkey = Get_Masterpkey(Masterskey)
  Userskey = KGCskey(Masterskey, $User)
  in
  [Fr(~ID), !Make_Masterskey(Masterskey, 'KGC')] --[ Create_ID($User, <Masterpkey, Userskey>)]->
  [!UserID(Masterpkey, Userskey, $User, ~ID)]

rule Attacker_Get_Masterskey:
  [!Make_Masterskey(Masterskey, 'KGC')] --[Oracle('MsterKey', 'KGC') ]-> [Out(Masterskey)]

rule Attacker_Get_Usersey:
  [!UserID(Masterpkey, Userskey, $User, ~ID)] --[Oracle('UserKey', $User) ]-> [Out(Userskey) ]

rule Attacker_make_ciphertxt:
  [Fr(m_), Fr(~Masterskey)] --[Oracle('MsterKey', 'KGC')]-> [ Out(enc(<'MsterKey', 'KGC', m_>, ~Masterskey)), St_Oracle(enc(<'MsterKey', 'KGC', m_>, ~Masterskey))]

rule Sender_encrypt:
 [Fr(~m), Fr(~nonce), !UserID(Masterpkey, Userskey, 'a', ~ID)] --[Send('UserKey', $User, enc(<'MsterKey', 'KGC', ~m>, Userskey)), Secret(~nonce), Run('a', 'b', ~nonce), Signed('a', <~nonce, 'a'>),Role('Sender')]-> [Out(<enc(<~nonce, 'a'>, KGCpkey(Masterpkey, 'b')), KGCpkey(Masterpkey, 'b'), sign(<~nonce, 'a'>, Userskey)>), St_Sender(Masterpkey, Userskey, ~ID, ~nonce), St_ReceiveKey(~m, Masterpkey)]

rule Encrypt_Attacker:
[!Make_Masterskey(~Masterskey, 'KGC'), In(<'MsterKey', 'KGC', m_>), In(<'UserKey', $User, ~m>), St_Oracle(m_), Fr(~nonce)] --[Send('MsterKey', 'KGC', enc(<'MsterKey', 'KGC', m_>, ~Masterskey)), Secret(~nonce), Role('Oracle'), Attacker_send_plain(m_)]->
 [Out(enc(<'MsterKey', 'KGC', m_>, ~Masterskey)), St_ReceiveKey_Oracle_ciphertext(enc(<'MsterKey', 'KGC', m_>, ~Masterskey))]

rule Dec_Oracle:
  let
  PAliceKey = KGCpkey(Masterpkey, 'a')
  message = dec(c, Userskey)
  nonce = fst(message)
  c_ = enc(<nonce, message>, PAliceKey)
  in
  [In(<c,<~nonce,'a'>>), !UserID(Masterpkey, Userskey, 'b', ~ID), St_Sender(Masterpkey, Userskey, ~ID, ~nonce), St_Oracle(enc(<'MsterKey', 'KGC', m_>, ~Masterskey)),In(<'MsterKey', 'KGC', ca>), In(<'UserKey', $User, cb>), Fr(m_), Fr(~Masterskey)]
   --[Eq(true, verify(c, message, PAliceKey)), Run('b', 'a', nonce)]->
  [Out(dec(<diff(<'MsterKey', 'KGC', ca>, <'UserKey', $User, cb>), nonce>, ~Masterskey)), St_Receiver(Masterpkey, Userskey, ~ID, ~nonce),St_ReceiveKey_Oracle_ciphertext(enc(<'MsterKey', 'KGC', m_>, ~Masterskey))]

rule Decrypt_Attacker:
  let 
  message = dec(c_, Userskey)
  in
  [St_ReceiveKey_Oracle_ciphertext(enc(<'MsterKey', 'KGC', m_>, ~Masterskey)), In(c_), St_ReceiveKey(~m, Masterpkey),In(<enc(message, KGCpkey(Masterpkey, 'b')), KGCpkey(Masterpkey, 'b'), sign(message, Userskey)>), St_Receiver(Masterpkey, Userskey, ~ID, ~nonce), Fr(m_), Fr(~Masterskey)]
  --[Finish(), Notequalvalue(<~m, message>), Secretmessage(~m), Commit('a', 'b', ~nonce),Verified('alice', 'bob', message)]-> []

restriction OnlyOnce:
 "All #i #j. OnlyOnce()@#i & OnlyOnce()@#j ==> #i = #j"

lemma check_aliveness:
  "All x y t #i. Commit(x,y,t)@i ==> (Ex id #j. Create_ID(y,id) @ j)
   | (Ex #r. Oracle('MsterKey', 'KGC')@r)"

lemma check_noninjective_agreement:
  "All x y t #i. Commit(x, y, t) @i ==> (Ex t #j. Run(y, x, t) @j)
        | (Ex #r. Oracle('UserKey', 'b')@r)
        | (Ex #j. Oracle('MsterKey', 'KGC')@j)"

lemma check_injective_agreement:
"All x y t #i. Commit(x, y, t) @i ==> (Ex #j. Run(y, x, t) @j & j < i & not (Ex z w #k. Commit(z, w, t) @k & not (#k = #i)))
| (Ex #r. Oracle('MsterKey', 'KGC')@r)"

lemma nonce_secrecy:
  "All s #i. Secret(s) @i ==> (not (Ex #j. K(s)@j)
      | (Ex #l. Oracle('UserKey','a')@l)
      | (Ex #l. Oracle('UserKey','b')@l)
      | (Ex #l. Oracle('MsterKey','KGC')@l))"

lemma ow_value_notequal:
 "All #i #j x. Notequalvalue(x)@i & Notequalvalue(x)@j ==> #i=#j"

lemma ow_m_secret:
 "All m #i. Secretmessage(m)@i ==> not (Ex #j. K(m)@j)"

lemma existential_unforgeability:
"All A B m #i. Verified(A, B, m)@i ==> ((Ex #j. Signed(A, m)@j & j<i) | (Ex #k. Oracle(A, B)@k & k<i) )"

end
